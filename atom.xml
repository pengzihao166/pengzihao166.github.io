<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HUT菜鸟小八的博客</title>
  
  
  <link href="http://xiaobazeo.github.io/atom.xml" rel="self"/>
  
  <link href="http://xiaobazeo.github.io/"/>
  <updated>2023-09-20T07:48:07.025Z</updated>
  <id>http://xiaobazeo.github.io/</id>
  
  <author>
    <name>xiaoba</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面经-睿联校招一面-2023-9-20</title>
    <link href="http://xiaobazeo.github.io/2023/09/20/%E9%9D%A2%E7%BB%8F-%E7%9D%BF%E8%81%94%E6%A0%A1%E6%8B%9B%E4%B8%80%E9%9D%A2-2023-9-20/"/>
    <id>http://xiaobazeo.github.io/2023/09/20/%E9%9D%A2%E7%BB%8F-%E7%9D%BF%E8%81%94%E6%A0%A1%E6%8B%9B%E4%B8%80%E9%9D%A2-2023-9-20/</id>
    <published>2023-09-20T07:15:43.000Z</published>
    <updated>2023-09-20T07:48:07.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux文件权限有那些？"><a href="#Linux文件权限有那些？" class="headerlink" title="Linux文件权限有那些？"></a>Linux文件权限有那些？</h2><h2 id="怎么控制文件权限？x权限是用来干什么的？"><a href="#怎么控制文件权限？x权限是用来干什么的？" class="headerlink" title="怎么控制文件权限？x权限是用来干什么的？"></a>怎么控制文件权限？x权限是用来干什么的？</h2><h2 id="操作系统中，进程和线程区别？"><a href="#操作系统中，进程和线程区别？" class="headerlink" title="操作系统中，进程和线程区别？"></a>操作系统中，进程和线程区别？</h2><h2 id="操作系统中的交换分区作用"><a href="#操作系统中的交换分区作用" class="headerlink" title="操作系统中的交换分区作用"></a>操作系统中的交换分区作用</h2><h2 id="MySQL中幻读和脏读的区别"><a href="#MySQL中幻读和脏读的区别" class="headerlink" title="MySQL中幻读和脏读的区别"></a>MySQL中幻读和脏读的区别</h2><h2 id="MySQL中聚簇索引和非聚簇索引的区别"><a href="#MySQL中聚簇索引和非聚簇索引的区别" class="headerlink" title="MySQL中聚簇索引和非聚簇索引的区别"></a>MySQL中聚簇索引和非聚簇索引的区别</h2><h2 id="MySQL的乐观锁和悲观锁"><a href="#MySQL的乐观锁和悲观锁" class="headerlink" title="MySQL的乐观锁和悲观锁"></a>MySQL的乐观锁和悲观锁</h2><h2 id="为什么MySQL使用B-树？"><a href="#为什么MySQL使用B-树？" class="headerlink" title="为什么MySQL使用B+树？"></a>为什么MySQL使用B+树？</h2><h2 id="什么子网掩码？有什么用？"><a href="#什么子网掩码？有什么用？" class="headerlink" title="什么子网掩码？有什么用？"></a>什么子网掩码？有什么用？</h2><h2 id="为什么说tcp是流式的传输协议"><a href="#为什么说tcp是流式的传输协议" class="headerlink" title="为什么说tcp是流式的传输协议"></a>为什么说tcp是流式的传输协议</h2><h2 id="http的常用请求方法"><a href="#http的常用请求方法" class="headerlink" title="http的常用请求方法"></a>http的常用请求方法</h2><h2 id="URL的组成部分"><a href="#URL的组成部分" class="headerlink" title="URL的组成部分"></a>URL的组成部分</h2><h2 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h2><h2 id="https如何保证传输安全"><a href="#https如何保证传输安全" class="headerlink" title="https如何保证传输安全"></a>https如何保证传输安全</h2><h2 id="刚刚提到的https的密匙协商是什么样的过程？"><a href="#刚刚提到的https的密匙协商是什么样的过程？" class="headerlink" title="刚刚提到的https的密匙协商是什么样的过程？"></a>刚刚提到的https的密匙协商是什么样的过程？</h2><h2 id="Java面向对象的多态的理解"><a href="#Java面向对象的多态的理解" class="headerlink" title="Java面向对象的多态的理解"></a>Java面向对象的多态的理解</h2><h2 id="快排的思想"><a href="#快排的思想" class="headerlink" title="快排的思想"></a>快排的思想</h2><h2 id="JWT的组成，以及怎么后端校验此token是否有效的？"><a href="#JWT的组成，以及怎么后端校验此token是否有效的？" class="headerlink" title="JWT的组成，以及怎么后端校验此token是否有效的？"></a>JWT的组成，以及怎么后端校验此token是否有效的？</h2><h2 id="雪花算法怎么实现不重复的？（从组成的角度回答）"><a href="#雪花算法怎么实现不重复的？（从组成的角度回答）" class="headerlink" title="雪花算法怎么实现不重复的？（从组成的角度回答）"></a>雪花算法怎么实现不重复的？（从组成的角度回答）</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux文件权限有那些？&quot;&gt;&lt;a href=&quot;#Linux文件权限有那些？&quot; class=&quot;headerlink&quot; title=&quot;Linux文件权限有那些？&quot;&gt;&lt;/a&gt;Linux文件权限有那些？&lt;/h2&gt;&lt;h2 id=&quot;怎么控制文件权限？x权限是用来干什么的？&quot;</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Netty-Client</title>
    <link href="http://xiaobazeo.github.io/2023/09/14/Netty-Client/"/>
    <id>http://xiaobazeo.github.io/2023/09/14/Netty-Client/</id>
    <published>2023-09-14T08:24:07.000Z</published>
    <updated>2023-09-15T05:59:41.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端初始化"><a href="#客户端初始化" class="headerlink" title="客户端初始化"></a>客户端初始化</h2><p>创建引导类，确认线程模型，IO模型，以及业务处理逻辑。</p><p><strong>客户端只需要一个线程模型即可</strong>，毕竟不是服务端不需要一个统一的线程模型去管理很多连接，客户端只需要一个线程模型主动去连接服务端就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap</span><br><span class="line">                <span class="comment">// 1.指定线程模型</span></span><br><span class="line">                .group(workerGroup)</span><br><span class="line">                <span class="comment">// 2.指定 IO 类型为 NIO</span></span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                <span class="comment">// 3.IO 处理逻辑</span></span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="comment">// 4.建立连接</span></span><br><span class="line">        bootstrap.connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8080</span>).addListener(future -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;连接成功!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">&quot;连接失败!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>connect</code> 方法返回的是一个 <code>Future</code>，也就是说这个方是异步的，我们通过 <code>addListener</code> 方法可以监听到连接是否成功。</p><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h4 id="attr-方法"><a href="#attr-方法" class="headerlink" title="attr()方法"></a>attr()方法</h4><ul><li>给客户端的Channel绑定自定义属性，通过channel.attr()取出属性，</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;客户端初始化&quot;&gt;&lt;a href=&quot;#客户端初始化&quot; class=&quot;headerlink&quot; title=&quot;客户端初始化&quot;&gt;&lt;/a&gt;客户端初始化&lt;/h2&gt;&lt;p&gt;创建引导类，确认线程模型，IO模型，以及业务处理逻辑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端只需要一个线程模</summary>
      
    
    
    
    
    <category term="Netty" scheme="http://xiaobazeo.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty-Server</title>
    <link href="http://xiaobazeo.github.io/2023/09/14/Netty-Server/"/>
    <id>http://xiaobazeo.github.io/2023/09/14/Netty-Server/</id>
    <published>2023-09-14T03:46:36.000Z</published>
    <updated>2023-09-14T09:08:06.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Netty服务端初始化"><a href="#Netty服务端初始化" class="headerlink" title="Netty服务端初始化"></a>Netty服务端初始化</h2><p>一般需要两个线程组，一个是用来管理接受新线程的线程组(Boss)，一个是处理每条连接的读写数据的线程组(Worker)，可以理解成老板出去接活，员工干细活。所以服务端的创建关键代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();<span class="comment">//接受管理新的连接</span></span><br><span class="line">        <span class="type">NioEventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();<span class="comment">//处理每条连接的数据读写</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();<span class="comment">//引导类进行服务端的启动操作。</span></span><br><span class="line">        serverBootstrap</span><br><span class="line">                .group(bossGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)<span class="comment">//指定IO模型，也可以指定BIO等其他IO模型（OioServerSocketChannel.class）</span></span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;NioSocketChannel&gt;() &#123;<span class="comment">//childHandler()主要是用来处理每个新连接的数据读写的业务逻辑</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(NioSocketChannel ch)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        serverBootstrap.bind(<span class="number">8000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h4 id="handler-方法和childHandler"><a href="#handler-方法和childHandler" class="headerlink" title="handler()方法和childHandler()"></a>handler()方法和childHandler()</h4><ul><li>handler()一般是对服务端启动过程中的一些业务逻辑处理</li><li>childHandler()一般是处理新连接的数据的读写逻辑处理</li></ul><h4 id="attr-方法和childAttr-方法"><a href="#attr-方法和childAttr-方法" class="headerlink" title="attr()方法和childAttr()方法"></a>attr()方法和childAttr()方法</h4><ul><li>attr()方法可以给服务端的channel自定义属性，实际上就是通过一个map维护不同的channel</li><li>childAttr()可以给每一条连接指定自定义属性，后续我们可以通过<code>channel.attr()</code>取出该属性。</li></ul><p>应用场景：</p><ul><li><strong>认证状态跟踪</strong>：您可以使用<code>childAttr()</code>来存储每个客户端连接的身份认证状态，以确保只有经过认证的客户端可以访问服务器资源。</li><li><strong>客户端会话信息</strong>：如果您的服务器需要跟踪每个客户端的会话信息，您可以使用<code>childAttr()</code>来存储会话数据，以便在处理客户端请求时访问它们。</li><li><strong>全局配置</strong>：<code>attr()</code>方法可用于存储服务器级别的全局配置，例如监听端口号或服务器的标识。</li><li><strong>连接统计</strong>：您可以使用<code>attr()</code>和<code>childAttr()</code>来记录连接的统计信息，例如连接的数量、连接的类型等。</li></ul><h4 id="childOption-方法和option-方法"><a href="#childOption-方法和option-方法" class="headerlink" title="childOption()方法和option()方法"></a>childOption()方法和option()方法</h4><ul><li><p><code>childOption()</code>可以给每条连接设置一些TCP底层相关的属性，比如上面，我们设置了两种TCP属性，其中</p><ul><li><code>ChannelOption.SO_KEEPALIVE</code>表示是否开启TCP底层心跳机制，true为开启</li><li><code>ChannelOption.TCP_NODELAY</code>表示是否开启Nagle算法，true表示关闭，false表示开启，通俗地说，如果要求高实时性，有数据发送时就马上发送，就关闭，如果需要减少发送次数减少网络交互，就开启。</li></ul></li><li><p><code>option()</code>方法可以给服务端channel设置一些属性，最常见的就是so_backlog，如下设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p>表示系统用于临时存放已完成三次握手的请求的队列的最大长度，如果连接建立频繁，服务器处理创建新连接较慢，可以适当调大这个参数</p></li></ul><h4 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind()方法"></a>bind()方法</h4><ul><li>是一个异步方法，返回一个<code>ChannelFuture</code>可以通过给<code>ChannelFuture</code>添加一监听器<code>GenericFutureListener</code>监听端口,在这个监听器的<code>operationComplete</code>方法里面监听绑定是否成功。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">serverBootstrap.bind(<span class="number">8000</span>).addListener(<span class="keyword">new</span> <span class="title class_">GenericFutureListener</span>&lt;Future&lt;? <span class="built_in">super</span> Void&gt;&gt;() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(Future&lt;? <span class="built_in">super</span> Void&gt; future)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;端口绑定成功!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;端口绑定失败!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>先创建引导类，指定线程模型，IO模型，连接读写处理逻辑，绑定端口即可启动服务端。</li><li>可以给channel设置一些属性值，设置底层TCP参数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Netty服务端初始化&quot;&gt;&lt;a href=&quot;#Netty服务端初始化&quot; class=&quot;headerlink&quot; title=&quot;Netty服务端初始化&quot;&gt;&lt;/a&gt;Netty服务端初始化&lt;/h2&gt;&lt;p&gt;一般需要两个线程组，一个是用来管理接受新线程的线程组(Boss)，一</summary>
      
    
    
    
    
    <category term="Netty" scheme="http://xiaobazeo.github.io/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Golang-Start</title>
    <link href="http://xiaobazeo.github.io/2023/08/31/Golang-Start/"/>
    <id>http://xiaobazeo.github.io/2023/08/31/Golang-Start/</id>
    <published>2023-08-31T09:41:21.000Z</published>
    <updated>2023-08-31T10:17:49.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建go-mod文件"><a href="#创建go-mod文件" class="headerlink" title="创建go mod文件"></a>创建go mod文件</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init manage</span><br></pre></td></tr></table></figure><p>创建一个叫做以manage为项目名的项目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;创建go-mod文件&quot;&gt;&lt;a href=&quot;#创建go-mod文件&quot; class=&quot;headerlink&quot; title=&quot;创建go mod文件&quot;&gt;&lt;/a&gt;创建go mod文件&lt;/h3&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="Go" scheme="http://xiaobazeo.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IOC-部分源码解读</title>
    <link href="http://xiaobazeo.github.io/2023/08/26/Spring-IOC-SourceCodeAnalysis/"/>
    <id>http://xiaobazeo.github.io/2023/08/26/Spring-IOC-SourceCodeAnalysis/</id>
    <published>2023-08-25T16:47:58.000Z</published>
    <updated>2023-08-29T02:35:09.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring容器启动"><a href="#Spring容器启动" class="headerlink" title="Spring容器启动"></a>Spring容器启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:applicationfile.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ApplicationContext context = new ClassPathXmlApplicationContext(...)</code>就是在 ClassPath 中寻找 xml 配置文件，根据 xml 文件内容来构建 ApplicationContext。</p><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/1.png" alt="1"></p><p>简单介绍一下<strong>FileSystemXmlApplicationContext</strong> 和 <strong>AnnotationConfigApplicationContext</strong> 这两个类</p><p><strong>1、FileSystemXmlApplicationContext</strong> 的构造函数需要一个 xml 配置文件在系统中的路径，其他和 ClassPathXmlApplicationContext 基本上一样。</p><p><strong>2、AnnotationConfigApplicationContext</strong> 是基于注解来使用的，它不需要配置文件，采用 java 配置类和各种注解来配置，是比较简单的方式。</p><p>利用ClassPathXmlApplicationContext类创建一个实例：</p><p>首先，定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line">    String <span class="title function_">getMessage</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们在 <strong>resources</strong> 目录新建一个配置文件，文件名随意，通常叫 application.xml 或 application-xxx.xml 就可以了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span> <span class="attr">default-autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.javadoop.example.MessageServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，我们就可以跑起来了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 用我们的配置文件来启动一个 ApplicationContext</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:application.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;context 启动成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从 context 中取出我们的 Bean，而不是用 new MessageServiceImpl() 这种方式</span></span><br><span class="line">        <span class="type">MessageService</span> <span class="variable">messageService</span> <span class="operator">=</span> context.getBean(MessageService.class);</span><br><span class="line">        <span class="comment">// 这句将输出: hello world</span></span><br><span class="line">        System.out.println(messageService.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p>顾名思义，就是一个生产Bean的工厂，负责生产和管理各个Bean实例，刚刚所说的ApplicationContext 实际上就是一个BeanFactory，BeanFactory接口继承结构如下：</p><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/2.png" alt="2"></p><ul><li><p>ListableBeanFactory：根据句Listable可知通过这个接口我们可以获取多个Bean，但是顶层BeanFactory只能每次获取单个Bean实例</p></li><li><p>HierarchicalBeanFactory：通过Hierarchical这个单词可知，我们可以通过这个接口创建多个BeanFactory（<strong>不是多个Bean实例</strong>），然后将多个BeanFactory设置为父子关系。</p></li><li><p>AutowireCapableBeanFactory 用于自动装配Bean的，虽然ApplicationContext 没有继承它，但是可以使用组合，ApplicationContext 的最后一个方法getAutowireCapableBeanFactory()就是组合使用。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">EnvironmentCapable</span>, ListableBeanFactory, HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, ResourcePatternResolver &#123;</span><br><span class="line">    String <span class="title function_">getId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getApplicationName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDisplayName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getStartupDate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ApplicationContext <span class="title function_">getParent</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    AutowireCapableBeanFactory <span class="title function_">getAutowireCapableBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConfigurableListableBeanFactory 这个接口比较特殊，继承了第二层的所有三个接口，但是ApplicationContext 没有</li></ul><h2 id="启动过程分析"><a href="#启动过程分析" class="headerlink" title="启动过程分析"></a>启动过程分析</h2><h3 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractXmlApplicationContext</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> Resource[] configResources;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果已经有 ApplicationContext 并需要配置成父子关系，那么调用这个构造方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(ApplicationContext parent)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(parent);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="type">boolean</span> refresh, ApplicationContext parent)</span></span><br><span class="line">      <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">super</span>(parent);</span><br><span class="line">    <span class="comment">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span></span><br><span class="line">    setConfigLocations(configLocations);</span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">      refresh(); <span class="comment">// 核心方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="refresh-方法"><a href="#refresh-方法" class="headerlink" title="refresh()方法"></a>refresh()方法</h3><p>介绍一下refresh方法，因为他是ClassPathXmlApplicationContext类构造方法的核心方法，它主要的作用就是用于重建，refresh方法会将原来的ApplicationContext销毁然后重新执行一次初始化操作。源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">   <span class="comment">// 这里创建一个锁，不然 refresh() 还没结束，你又来个启动或销毁容器的操作，那不就乱套了嘛，类似于MySQL“当前读”防止幻读的时候的间隙锁。</span></span><br><span class="line">   <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 准备工作，记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符</span></span><br><span class="line">      prepareRefresh();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span></span><br><span class="line">      <span class="comment">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span></span><br><span class="line">      <span class="comment">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span></span><br><span class="line">      <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span></span><br><span class="line">      <span class="comment">// 这块待会会展开说</span></span><br><span class="line">      prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span></span><br><span class="line">         <span class="comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span></span><br><span class="line">         <span class="comment">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span></span><br><span class="line">         postProcessBeanFactory(beanFactory);</span><br><span class="line">         <span class="comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span></span><br><span class="line">         invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span></span><br><span class="line">         <span class="comment">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span></span><br><span class="line">         <span class="comment">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span></span><br><span class="line">         registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化当前 ApplicationContext 的 MessageSource。</span></span><br><span class="line">         initMessageSource();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 初始化当前 ApplicationContext 的事件广播器。</span></span><br><span class="line">         initApplicationEventMulticaster();</span><br><span class="line"> </span><br><span class="line">         <span class="comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span></span><br><span class="line">         <span class="comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span><br><span class="line">         onRefresh();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span></span><br><span class="line">         registerListeners();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 重点，重点，重点</span></span><br><span class="line">         <span class="comment">// 初始化所有的 singleton beans</span></span><br><span class="line">         <span class="comment">//（lazy-init 的除外）</span></span><br><span class="line">         finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 最后，广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">         finishRefresh();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Destroy already created singletons to avoid dangling resources.</span></span><br><span class="line">         <span class="comment">// 销毁已经初始化的 singleton 的 Beans，以免有些 bean 会一直占用资源</span></span><br><span class="line">         destroyBeans();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Reset &#x27;active&#x27; flag.</span></span><br><span class="line">         cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 把异常往外抛</span></span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">// Reset common introspection caches in Spring&#x27;s core, since we</span></span><br><span class="line">         <span class="comment">// might not ever need metadata for singleton beans anymore...</span></span><br><span class="line">         resetCommonCaches();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建-Bean-容器前的准备工作"><a href="#创建-Bean-容器前的准备工作" class="headerlink" title="创建 Bean 容器前的准备工作"></a>创建 Bean 容器前的准备工作</h4><p>prepareRefresh()就是用来创建Bean容器之前的准备工作，在讲refresh方法中讲到过，主要是记录下容器的启动时间、标记“已启动”状态、处理配置文件中的占位符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">// 记录启动时间，</span></span><br><span class="line">   <span class="comment">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span></span><br><span class="line">   <span class="built_in">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">   <span class="built_in">this</span>.closed.set(<span class="literal">false</span>);</span><br><span class="line">   <span class="built_in">this</span>.active.set(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Refreshing &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize any placeholder property sources in the context environment，初始化上下文环境中的任何占位符属性源</span></span><br><span class="line">   initPropertySources();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 校验 xml 配置文件</span></span><br><span class="line">   getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.earlyApplicationEvents = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;ApplicationEvent&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Bean容器，加载并注册Bean"><a href="#创建Bean容器，加载并注册Bean" class="headerlink" title="创建Bean容器，加载并注册Bean"></a>创建Bean容器，加载并注册Bean</h4><p>obtainFreshBeanFactory() 方法就是用于初始化BeanFactory、加载Bean、注册Bean等这个方法是refresh中最重要的一个部分，<strong>但是这个方法执行结束之后Bean实例并没有生成，也就是说Bean没有完成初始化。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title function_">obtainFreshBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">// 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span></span><br><span class="line">   refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 返回刚刚创建的 BeanFactory</span></span><br><span class="line">   <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Bean factory for &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + beanFactory);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">   <span class="comment">// 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span></span><br><span class="line">   <span class="comment">// 注意，应用中 BeanFactory 本来就是可以多个的，这里可不是说应用全局是否有 BeanFactory，而是当前ApplicationContext 是否有 BeanFactory</span></span><br><span class="line">   <span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">      destroyBeans();</span><br><span class="line">      closeBeanFactory();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 初始化一个 DefaultListableBeanFactory，至于为什么要用这个类是因为前面说的继承图，具体为什么见下方注解</span></span><br><span class="line">      <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> createBeanFactory();</span><br><span class="line">      <span class="comment">// 用于 BeanFactory 的序列化</span></span><br><span class="line">      beanFactory.setSerializationId(getId());</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">      <span class="comment">// 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span></span><br><span class="line">      customizeBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 加载 Bean 到 BeanFactory 中</span></span><br><span class="line">      loadBeanDefinitions(beanFactory);</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">         <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么选择实例化 <strong>DefaultListableBeanFactory</strong> ？</p><p>前面的BeanFactory中有一个接口叫做ConfigurableListableBeanFactory，它实现了BeanFactory下面一层的所有三个接口，而这个接口只有一个实现类DefaultListableBeanFactory，而实现类DefaultListableBeanFactory实际上间接实现了BeanFactory下的三个接口，所以结论就是，DefaultListableBeanFactory是最牛的BeanFactory。例图如下</p></blockquote><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/2.png" alt="2"></p><p>customizeBeanFactory(beanFactory)方法就是配置是否允许BeanDefinition覆盖、是否允许循环引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.allowBeanDefinitionOverriding != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 是否允许 Bean 定义覆盖</span></span><br><span class="line">      beanFactory.setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.allowCircularReferences != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 是否允许 Bean 间的循环依赖</span></span><br><span class="line">      beanFactory.setAllowCircularReferences(<span class="built_in">this</span>.allowCircularReferences);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>loadBeanDefinitions(beanFactory)就是根据配置，加载各个Bean，然后放到BeanFactory中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">   <span class="comment">// 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader来读取加载配置、解析</span></span><br><span class="line">   <span class="type">XmlBeanDefinitionReader</span> <span class="variable">beanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Configure the bean definition reader with this context&#x27;s</span></span><br><span class="line">   <span class="comment">// resource loading environment.</span></span><br><span class="line">   beanDefinitionReader.setEnvironment(<span class="built_in">this</span>.getEnvironment());</span><br><span class="line">   beanDefinitionReader.setResourceLoader(<span class="built_in">this</span>);</span><br><span class="line">   beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> <span class="title class_">ResourceEntityResolver</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 初始化 BeanDefinitionReader，其实这个是提供给子类覆写的，</span></span><br><span class="line"></span><br><span class="line">   initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 重点来了，继续往下，实际上就是loadBeanDefinitions()方法的重载，这两个方法还是在一个类中</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">   Resource[] configResources = getConfigResources();</span><br><span class="line">   <span class="keyword">if</span> (configResources != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 往下看</span></span><br><span class="line">      reader.loadBeanDefinitions(configResources);</span><br><span class="line">   &#125;</span><br><span class="line">   String[] configLocations = getConfigLocations();</span><br><span class="line">   <span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 2</span></span><br><span class="line">      reader.loadBeanDefinitions(configLocations);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">&quot;Resource array must not be null&quot;</span>);</span><br><span class="line">   <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 注意这里是个 for 循环，也就是每个文件是一个 resource</span></span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">// 继续往下看</span></span><br><span class="line">      counter += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 最后返回 counter，表示总共加载了多少的 BeanDefinition</span></span><br><span class="line">   <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">EncodedResource</span>(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   Assert.notNull(encodedResource, <span class="string">&quot;EncodedResource must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Loading XML bean definitions from &quot;</span> + encodedResource.getResource());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 用一个 ThreadLocal 来存放配置文件资源</span></span><br><span class="line">   Set&lt;EncodedResource&gt; currentResources = <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">   <span class="keyword">if</span> (currentResources == <span class="literal">null</span>) &#123;</span><br><span class="line">      currentResources = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;EncodedResource&gt;(<span class="number">4</span>);</span><br><span class="line">      <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> encodedResource.getResource().getInputStream();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream);</span><br><span class="line">         <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="literal">null</span>) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 核心部分是这里，往下面看</span></span><br><span class="line">         <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         inputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span><br><span class="line">      <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 这里就不看了，将 xml 文件转换为 Document 对象</span></span><br><span class="line">      <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> doLoadDocument(inputSource, resource);</span><br><span class="line">      <span class="comment">// 继续</span></span><br><span class="line">      <span class="keyword">return</span> registerBeanDefinitions(doc, resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (...</span><br><span class="line">&#125;</span><br><span class="line">          </span><br><span class="line"><span class="comment">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="type">BeanDefinitionDocumentReader</span> <span class="variable">documentReader</span> <span class="operator">=</span> createBeanDefinitionDocumentReader();</span><br><span class="line">   <span class="type">int</span> <span class="variable">countBefore</span> <span class="operator">=</span> getRegistry().getBeanDefinitionCount();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">// 这里才使用另外一个类(DefaultBeanDefinitionDocumentReader)的方法</span></span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br><span class="line">          </span><br><span class="line"><span class="comment">//创建DOM树结构，其中的doRegisterBeanDefinitions()函数主要用于解析xml文件</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.readerContext = readerContext;</span><br><span class="line">   logger.debug(<span class="string">&quot;Loading bean definitions&quot;</span>);</span><br><span class="line">   <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">   <span class="comment">// 从 xml 根节点开始解析文件</span></span><br><span class="line">   doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;         </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring容器启动&quot;&gt;&lt;a href=&quot;#Spring容器启动&quot; class=&quot;headerlink&quot; title=&quot;Spring容器启动&quot;&gt;&lt;/a&gt;Spring容器启动&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://xiaobazeo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>微布开发-热点动态缓存击穿</title>
    <link href="http://xiaobazeo.github.io/2023/08/20/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E7%83%AD%E7%82%B9%E5%8A%A8%E6%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/"/>
    <id>http://xiaobazeo.github.io/2023/08/20/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E7%83%AD%E7%82%B9%E5%8A%A8%E6%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/</id>
    <published>2023-08-20T09:10:57.000Z</published>
    <updated>2023-09-14T03:40:22.032Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a>业务场景：</h3><p>热点动态中的某一条说说因为过期且当时大量用户请求查看动态详情，出现数据库查询压力骤增的情况，从而导致某一热点动态的缓存击穿的情况。</p><h3 id="想法："><a href="#想法：" class="headerlink" title="想法："></a>想法：</h3><p>1、 互斥锁：在热点数据的缓存失效时，可以尝试使用分布式锁来避免多个请求同时访问数据库。在获取锁的情况下，只有一个请求去加载数据并更新缓存，其他请求等待，从而减轻数据库的压力。t</p><ol><li><strong>获取互斥锁：</strong> 当缓存失效时，多个请求会尝试获取一个互斥锁。如果只有一个请求能够成功获取锁，那么它将负责加载数据并更新缓存。</li><li><strong>获取锁成功：</strong> 如果某个请求成功获取了互斥锁，它可以开始加载数据。在加载数据时，需要判断缓存是否已经被其他请求加载（可能在当前请求获取锁的过程中被其他请求加载了），避免重复加载数据。</li><li><strong>更新缓存：</strong> 获取锁成功的请求负责加载数据并更新缓存。在更新缓存之后，释放互斥锁，让其他等待锁的请求有机会获取锁并使用更新后的缓存。</li><li><strong>获取锁失败：</strong> 如果请求获取锁失败，意味着其他请求已经在加载数据和更新缓存了。这些失败的请求可以等待一段时间后再次尝试，或者直接返回默认值，以避免多次同时访问数据库。</li></ol><h3 id="伪代码如下："><a href="#伪代码如下：" class="headerlink" title="伪代码如下："></a>伪代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheWithMutexLock</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, T&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheWithMutexLock</span><span class="params">(RedisTemplate&lt;String, T&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getOrLoadFromCache</span><span class="params">(String key, Supplier&lt;T&gt; dataLoader, T defaultValue, <span class="type">long</span> lockTimeout)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_PREFIX + key;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 尝试获取互斥锁</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">gotLock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(lockKey, <span class="string">&quot;locked&quot;</span>, lockTimeout, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (gotLock) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 检查缓存是否已经加载</span></span><br><span class="line">                    <span class="type">T</span> <span class="variable">cachedValue</span> <span class="operator">=</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">                    <span class="keyword">if</span> (cachedValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> cachedValue;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 加载数据并更新缓存</span></span><br><span class="line">                    <span class="type">T</span> <span class="variable">loadedValue</span> <span class="operator">=</span> dataLoader.get();</span><br><span class="line">                    redisTemplate.opsForValue().set(key, loadedValue);</span><br><span class="line">                    <span class="keyword">return</span> loadedValue;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    redisTemplate.delete(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 获取锁失败，返回默认值</span></span><br><span class="line">                <span class="keyword">return</span> defaultValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> defaultValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>getOrLoadFromCache</code> 方法尝试获取互斥锁，如果获取成功，它会检查缓存是否已经加载数据，如果没有则加载数据并更新缓存。如果获取锁失败，就直接返回默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RedisTemplate&lt;String, String&gt; redisTemplate = ...; <span class="comment">// 初始化 RedisTemplate</span></span><br><span class="line">CacheWithMutexLock&lt;String&gt; cache = <span class="keyword">new</span> <span class="title class_">CacheWithMutexLock</span>&lt;&gt;(redisTemplate);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;my_key&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> cache.getOrLoadFromCache(key, </span><br><span class="line">    () -&gt; &#123;</span><br><span class="line">        <span class="comment">// 从数据库或其他数据源加载数据的逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Loaded data&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;Default value&quot;</span>,</span><br><span class="line">    <span class="number">5000</span> <span class="comment">// 互斥锁的超时时间，单位为毫秒</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>RedisTemplate</code> 的一个简化实现。使用互斥锁来协调多个请求的数据加载和缓存更新，可以避免缓存击穿问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;业务场景：&quot;&gt;&lt;a href=&quot;#业务场景：&quot; class=&quot;headerlink&quot; title=&quot;业务场景：&quot;&gt;&lt;/a&gt;业务场景：&lt;/h3&gt;&lt;p&gt;热点动态中的某一条说说因为过期且当时大量用户请求查看动态详情，出现数据库查询压力骤增的情况，从而导致某一热点动态的缓</summary>
      
    
    
    
    
    <category term="微布开发思路总结" scheme="http://xiaobazeo.github.io/tags/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Spring-DesignPattern</title>
    <link href="http://xiaobazeo.github.io/2023/08/20/Spring-DesignPattern/"/>
    <id>http://xiaobazeo.github.io/2023/08/20/Spring-DesignPattern/</id>
    <published>2023-08-20T02:51:51.000Z</published>
    <updated>2023-08-20T10:46:43.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="控制反转和依赖注入"><a href="#控制反转和依赖注入" class="headerlink" title="控制反转和依赖注入"></a>控制反转和依赖注入</h2><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h2 id="模版方法"><a href="#模版方法" class="headerlink" title="模版方法"></a>模版方法</h2><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;控制反转和依赖注入&quot;&gt;&lt;a href=&quot;#控制反转和依赖注入&quot; class=&quot;headerlink&quot; title=&quot;控制反转和依赖注入&quot;&gt;&lt;/a&gt;控制反转和依赖注入&lt;/h2&gt;&lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://xiaobazeo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-AOP</title>
    <link href="http://xiaobazeo.github.io/2023/08/20/Spring-AOP/"/>
    <id>http://xiaobazeo.github.io/2023/08/20/Spring-AOP/</id>
    <published>2023-08-20T02:51:09.000Z</published>
    <updated>2023-08-25T16:30:29.513Z</updated>
    
    <content type="html"><![CDATA[<p>​    AOP（面向切面编程）：就是把公共逻辑抽出来，让开发者更好的专注于业务逻辑的开发，AOP是<a href>OOP</a>的补充，OOP是面向类和对象的，但是AOP是面向不同切面的，一个切面可以横跨多个类和对象去操作，极大提高开发效率。</p><p>​    例如一个订单的创建，可能需要下列四个步骤</p><p>​    1、权限校验</p><p>​    2、事务管理</p><p>​    3、创建订单</p><p>​    4、日志打印</p><p>​    如果使用AOP的思想，其实就可以把四个步骤抽象成四个切面，让开发者专注于第3个切面，其他的切面都用基础通用的逻辑（就是抽象出来的公共逻辑），统计交给AOP封装管理。</p><h3 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h3><p><strong>通过代理模式实现</strong>，实现方式有两种，一种事基于Java原生的动态代理，一种是基于cglib的动态代理。</p><p>Spring AOP默认使用JDK的原生代理，可以代理任何接口，但是不能代理没有接口的类，所以使用cglib来实现动态代理没有接口的类。</p><h3 id="AOP的业务场景："><a href="#AOP的业务场景：" class="headerlink" title="AOP的业务场景："></a>AOP的业务场景：</h3><p>1、参数校验</p><p>当使用AOP思想实现参数校验功能时，你可以创建一个AOP切面来拦截需要校验的方法，并从<code>HttpServletRequest</code>中获取JWT参数进行校验。以下是一个基本示例：</p><ul><li><strong>创建自定义注解：</strong> 创建一个自定义注解，用于标记需要进行JWT校验的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ValidateJWT &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>编写AOP切面：</strong> 创建一个AOP切面，用于拦截带有<code>@ValidateJWT</code>注解的方法，并从<code>HttpServletRequest</code>中获取JWT参数进行校验。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTValidationAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 替换为你的JWT密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;your-secret-key&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;@annotation(com.example.ValidateJWT)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">validateJWT</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> extractTokenFromRequest(request);</span><br><span class="line">        <span class="keyword">if</span> (jwtToken == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;JWT token is missing&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser().setSigningKey(secretKey).parseClaimsJws(jwtToken).getBody();</span><br><span class="line">            <span class="comment">// 在这里可以根据需要进一步处理claims，比如判断过期时间、验证issuer等</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid JWT token&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractTokenFromRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authorizationHeader</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (authorizationHeader != <span class="literal">null</span> &amp;&amp; authorizationHeader.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> authorizationHeader.substring(<span class="number">7</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了<code>@Autowired</code>来注入<code>HttpServletRequest</code>，然后在AOP切面中使用<code>extractTokenFromRequest</code>方法从请求头中提取JWT token。然后，我们在校验逻辑中解析JWT token，并根据需要处理JWT的内容。这个切面会在带有<code>@ValidateJWT</code>注解的方法执行前进行JWT校验。</p><ul><li><strong>在需要校验的方法上添加注解：</strong> 在需要校验JWT的方法上添加<code>@ValidateJWT</code>注解。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ValidateJWT</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里处理请求，前置通知会在此方法执行前进行JWT校验</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个示例中，<code>processRequest</code>方法会在执行前进行JWT校验，确保JWT的有效性。同时，你可以将类似的校验逻辑应用于其他带有JWT的方法，以提高代码的安全性和可维护性。请注意，实际项目中可能需要根据业务需求进行更复杂的校验逻辑。</p><p>2、缓存逻辑</p><p>当使用AOP思想来实现Redis的缓存逻辑时，你可以按照以下步骤来操作：</p><ol><li><p><strong>引入依赖：</strong> 在你的项目中引入Spring Data Redis依赖，确保你能够使用Redis作为缓存。</p></li><li><p><strong>创建缓存切面：</strong> 创建一个AOP切面，用于拦截带有<code>@CacheableResult</code>注解的方法，并将方法的返回值缓存到Redis。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(pointcut = &quot;@annotation(com.example.CacheableResult)&quot;, returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cacheMethodResult</span><span class="params">(JoinPoint joinPoint, Object result)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().toShortString();</span><br><span class="line">        redisTemplate.opsForValue().set(methodName, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个切面中，我们使用了<code>@Autowired</code>注入了<code>RedisTemplate</code>，这是Spring提供的与Redis交互的工具类。<code>cacheMethodResult</code>方法会在带有<code>@CacheableResult</code>注解的方法执行后执行，将方法返回的结果存储到Redis缓存中，使用方法的名称作为缓存的键。</p><ol start="3"><li><strong>创建自定义注解：</strong> 创建一个自定义注解，用于标记需要进行缓存的方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheableResult &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>在需要缓存的方法上添加注解：</strong> 在需要进行缓存的方法上添加<code>@CacheableResult</code>注解。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheableResult</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFromDatabase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以模拟从数据库中获取数据的操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data from database&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>getFromDatabase</code>方法被<code>@CacheableResult</code>注解标记，当这个方法被调用并返回结果时，切面会拦截这个方法的执行，将返回的数据存储到Redis缓存中。</p><ol start="5"><li><strong>启用AOP和组件扫描：</strong> 在Spring Boot的配置类上添加<code>@EnableAspectJAutoProxy</code>注解，以启用AOP功能，同时确保你的切面和服务类被正确地扫描到。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置其他内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上步骤，你就可以使用AOP思想实现基本的Redis缓存逻辑。当使用带有<code>@CacheableResult</code>注解的方法时，切面会自动将方法的结果存储到Redis缓存中。在实际项目中，你可能还需要考虑缓存的失效策略、数据更新时的缓存更新等细节。同时，Spring框架也提供了更丰富的缓存管理功能，你可以根据具体的需求进行选择和配置。</p><p>3、日志打印</p><p>实际上在日志打印的场景中，不一定需要创建自定义注解。通常情况下，日志打印是一种通用的操作，因此你可以直接在切面中定义切点，而不必引入自定义注解。</p><p>以下是一个更准确的示例，展示如何使用AOP来实现日志打印功能：</p><ol><li><strong>创建日志切面：</strong> 创建一个AOP切面，用于拦截方法的执行并记录日志。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LoggingAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.example.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logMethodExecution</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().toShortString();</span><br><span class="line">        logger.info(<span class="string">&quot;Method &#123;&#125; executed&quot;</span>, methodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个切面中，<code>LoggingAspect</code>会拦截<code>com.example</code>包下所有方法的执行，在方法执行后使用<code>logger</code>记录方法的名称。</p><ol start="2"><li><strong>启用AOP和组件扫描：</strong> 在Spring Boot的配置类上添加<code>@EnableAspectJAutoProxy</code>注解，以启用AOP功能，同时确保你的切面被正确地扫描到。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.EnableAspectJAutoProxy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.example&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 配置其他内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>确保<code>basePackages</code>中的包路径是你的切面和服务类所在的包。</p><ol start="3"><li><strong>调用方法：</strong> 在业务逻辑中调用方法，切面会在方法执行后记录日志。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Processed result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，当调用<code>process</code>方法时，切面会在方法执行后使用日志记录相关信息。</p><ol start="4"><li><strong>配置日志输出：</strong> 在<code>src/main/resources</code>目录下创建<code>logback.xml</code>文件，根据你的需求配置日志的输出格式、级别等。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上步骤，你就可以使用AOP思想实现基本的日志打印功能。当执行方法时，切面会在方法执行后记录相关的日志信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    AOP（面向切面编程）：就是把公共逻辑抽出来，让开发者更好的专注于业务逻辑的开发，AOP是&lt;a href&gt;OOP&lt;/a&gt;的补充，OOP是面向类和对象的，但是AOP是面向不同切面的，一个切面可以横跨多个类和对象去操作，极大提高开发效率。&lt;/p&gt;
&lt;p&gt;​    例如</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://xiaobazeo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring-IOC</title>
    <link href="http://xiaobazeo.github.io/2023/08/20/Spring-IOC/"/>
    <id>http://xiaobazeo.github.io/2023/08/20/Spring-IOC/</id>
    <published>2023-08-20T02:50:57.000Z</published>
    <updated>2023-08-25T16:48:30.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>所谓的IOC就是Inversion Of Control，也就是控制反转，其实就是对于某个对象A，原来的控制权在B手上，B想用就能用，想不用就不用，但是现在把控制权交还给了A，只有A给了别人权限才能用，这就是控制反转。</p><p>没有IOC的时候，举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();<span class="comment">//此时就是我们所说的控制权在B手上，也就是控制(不是控制反转)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(a);<span class="comment">//此时B对A控制使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了IOC时使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="comment">//此时控制权在A自己手上，可以直接使用，当然如果对象A没有注入到容器之中的话，B就不能使用。</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> A a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">use</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(a);<span class="comment">//此时B对A控制使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结下来就是：IOC（不是指的Spring IOC容器，Spring IOC容器是实现IOC思想的一个载体）实际上就是一种设计思想，可以通过Spring框架对一些原本本来需要手动创建的对象，交由Spring框架统一管理。</p><p>​    如果没有Spring的IOC容器的话，我们要使用某个对象的时候只能通过创建对象的方式解决，但是有了SpringIOC容器之后，对象就会交由IOC容器创建并管理，当我们想使用的时候就直接从容器中获取即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是IOC&quot;&gt;&lt;a href=&quot;#什么是IOC&quot; class=&quot;headerlink&quot; title=&quot;什么是IOC&quot;&gt;&lt;/a&gt;什么是IOC&lt;/h3&gt;&lt;p&gt;所谓的IOC就是Inversion Of Control，也就是控制反转，其实就是对于某个对象A，原来的控制</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://xiaobazeo.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-k个一组翻转链表</title>
    <link href="http://xiaobazeo.github.io/2023/08/18/leetcode-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>http://xiaobazeo.github.io/2023/08/18/leetcode-k%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2023-08-18T08:36:29.000Z</published>
    <updated>2023-08-18T08:59:44.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你链表的头节点 <code>head</code> ，每 <code>k</code> 个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/reverse_ex1.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">2</span></span><br><span class="line">输出：<span class="string">[2,1,4,3,5]</span></span><br></pre></td></tr></table></figure><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/reverse_ex2.jpg" alt="img"></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span>, k = <span class="number">3</span></span><br><span class="line">输出：<span class="string">[3,2,1,4,5]</span></span><br></pre></td></tr></table></figure><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="关键点："><a href="#关键点：" class="headerlink" title="关键点："></a>关键点：</h3><ul><li>局部翻转</li><li>k &gt; 剩余局部链表长度时，这部分链表无需翻转</li></ul><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li><p>初始化</p><p><code>ListNode dummy = new ListNode(0,head);</code></p></li><li><p>设置指针实现局部翻转</p><p><code>ListNode pre = dummy,end = dummy</code></p></li><li><p>end.next != null 则遍历链表</p><ol><li><p>根据k确定第一组局部链表的尾部指针</p><p><code>for(int i = 0; i &lt; k &amp;&amp; end != null; i++) end = end.next;</code></p><p>此时<code>end == null</code>时，说明剩余的局部链表长度小于k，直接跳出循环无需翻转链表。</p></li><li><p>确定局部链表起始位置及下一组的起始位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start = pre.next;</span><br><span class="line">next = end.next;</span><br></pre></td></tr></table></figure></li><li><p>断开end的后续链表，并调用翻转函数使pre.next连接翻转后的链表。</p><p><code>pre.next = reverse(start);</code></p></li><li><p>重新连接被翻转和未翻转的部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start.next = next;<span class="comment">//连接后面未翻转的链表</span></span><br><span class="line">pre = next;<span class="comment">//重置pre和end指针开始新的一轮链表组的翻转</span></span><br><span class="line">end = pre;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>返回dummy后面所有已经翻转的链表</p></li></ol><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>, head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy, end = dummy;</span><br><span class="line">        <span class="keyword">while</span>(end.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k &amp;&amp; end != <span class="literal">null</span>; i++)&#123;</span><br><span class="line">                end = end.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(end == <span class="literal">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">start</span> <span class="operator">=</span> pre.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> end.next;</span><br><span class="line">            end.next = <span class="literal">null</span>; </span><br><span class="line">            pre.next = reverse(start);</span><br><span class="line">            start.next = next;</span><br><span class="line">            pre = start;</span><br><span class="line">            end = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;headerlink&quot; title=&quot;题目描述：&quot;&gt;&lt;/a&gt;题目描述：&lt;/h2&gt;&lt;p&gt;给你链表的头节点 &lt;code&gt;head&lt;/code&gt; ，每 &lt;code&gt;k&lt;/code&gt; 个节点一组进行翻转，请你返</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://xiaobazeo.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>面经-借钱包交易平台Java开发实习</title>
    <link href="http://xiaobazeo.github.io/2023/08/10/%E9%9D%A2%E7%BB%8F-%E5%80%9F%E9%92%B1%E5%8C%85%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0Java%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0/"/>
    <id>http://xiaobazeo.github.io/2023/08/10/%E9%9D%A2%E7%BB%8F-%E5%80%9F%E9%92%B1%E5%8C%85%E4%BA%A4%E6%98%93%E5%B9%B3%E5%8F%B0Java%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-08-10T05:14:54.000Z</published>
    <updated>2023-08-18T12:46:41.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如果对于jdk版本升级，对于jvm的一些参数修改有哪些？"><a href="#如果对于jdk版本升级，对于jvm的一些参数修改有哪些？" class="headerlink" title="如果对于jdk版本升级，对于jvm的一些参数修改有哪些？"></a>如果对于jdk版本升级，对于jvm的一些参数修改有哪些？</h2><ol><li>-Xmx 和 -Xms：这些参数用于设置 JVM 的最大堆内存和初始堆内存大小。在 JDK 版本升级后，由于可能存在新的特性或改进，建议重新评估应用程序的内存需求，并相应地调整这些参数。</li><li>-XX:NewRatio 和 -XX:SurvivorRatio：这些参数用于调整新生代（Young Generation）和老年代（Old Generation）的比例和新生代中 Eden 区和 Survivor 区的比例。在 JDK 版本升级后，新的默认比例可能会有所变化，可能需要重新设置这些参数以优化垃圾回收性能。</li><li>-XX:+UseConcMarkSweepGC 和 -XX:+UseG1GC 等：这些参数用于选择不同的垃圾回收器。随着 JDK 版本的升级，可能会引入新的垃圾回收器或对现有的回收器进行优化，因此需要根据应用程序的特性和需求选择合适的垃圾回收器和相应的参数。</li><li>-XX:MaxMetaspaceSize：在 JDK 8 及之前的版本中，用于设置永久代（Permanent Generation）的最大大小。但从 JDK 8 开始，永久代被移除，取而代之的是 Metaspace。因此，在 JDK 版本升级后，如果之前使用了永久代的参数，需要调整为 Metaspace 相关的参数。</li><li>其他新的 -XX 开头的参数：随着 JDK 版本的升级，可能会引入新的 JVM 参数，用于控制新的特性或优化性能。因此，在升级后应该查阅新的文档，了解这些新参数的用法和影响，并根据需要进行配置。</li></ol><h2 id="介绍包装类和基本数据类型的自动拆箱和自动装箱"><a href="#介绍包装类和基本数据类型的自动拆箱和自动装箱" class="headerlink" title="介绍包装类和基本数据类型的自动拆箱和自动装箱?"></a>介绍包装类和基本数据类型的自动拆箱和自动装箱?</h2><p>自动装箱：将基本数据类型转换成对应的包装类型</p><p>自动拆箱：将包装类型转换成对应的基本数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span>  <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//装箱  Integer.valueOf(10);</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i;<span class="comment">//拆箱   n = i.intValue();</span></span><br></pre></td></tr></table></figure><h2 id="什么常见场景会自动触发自动装箱和自动拆箱？"><a href="#什么常见场景会自动触发自动装箱和自动拆箱？" class="headerlink" title="什么常见场景会自动触发自动装箱和自动拆箱？"></a>什么常见场景会自动触发自动装箱和自动拆箱？</h2><p>自动装箱场景：</p><ul><li>将基本数据类型赋值给对应的包装类型，比如:Integer i = 10;</li><li>将基本数据类型作为参数赋值给接受包装类型的方法。</li></ul><p>自动拆箱场景：</p><ul><li>将包装类型赋值给对应的基本数据类型，比如<code>Integer i = 10; int n = i;</code></li><li>将包装类型作为参数赋值给接受对应基本数据类型的方法。</li></ul><h2 id="对于Integer类型的数据进行比较大小需要注意哪些问题？"><a href="#对于Integer类型的数据进行比较大小需要注意哪些问题？" class="headerlink" title="对于Integer类型的数据进行比较大小需要注意哪些问题？"></a>对于Integer类型的数据进行比较大小需要注意哪些问题？</h2><p>1、比较大小：使用equals方法，因为equals方法比较的是对象的值，而==比较的是对象的引用地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">n == i; <span class="comment">// YES</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">a == b;<span class="comment">//NO，因为Integer会缓存-128-127的对象，此时==号比较的是a和b的引用地址，但是此时a和b的值不在此缓存范围内，会重新创建两个不同的引用，进行引用地址的比较。</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line">c == d;<span class="comment">//NO</span></span><br><span class="line">c.equals(d);<span class="comment">//YES</span></span><br></pre></td></tr></table></figure><p>2、尽量避免频繁的拆箱装箱，频繁的拆装箱会造成一些不必要的资源损耗。</p><p>3、避免空指针异常：如果包装类型定义了null，此时进行自动拆箱的时候会抛出NPE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer n= <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n;<span class="comment">//会抛出NPE,NullPointException</span></span><br></pre></td></tr></table></figure><h2 id="为什么是选择equals方法去比较Integer这一类包装类类型的数据？"><a href="#为什么是选择equals方法去比较Integer这一类包装类类型的数据？" class="headerlink" title="为什么是选择equals方法去比较Integer这一类包装类类型的数据？"></a>为什么是选择equals方法去比较Integer这一类包装类类型的数据？</h2><p>使用==号的时候，如果Integer是通过<code>创建对象或者自动装箱的数据在-128~127的范围就会返回false</code>，==比较的是两个Integer对象的引用地址，如果出现刚刚所述的两种情况，是因为他们此时的所属对象的引用地址不一样导致的。</p><p>而使用equals方法比较的是两个对象之间的值，而不是引用地址。</p><h2 id="在重写一个对象的时候为什么要重写equals-以及hashcode-？"><a href="#在重写一个对象的时候为什么要重写equals-以及hashcode-？" class="headerlink" title="在重写一个对象的时候为什么要重写equals()以及hashcode()？"></a>在重写一个对象的时候为什么要重写equals()以及hashcode()？</h2><p>因为两个相等的对象的hashCode必须相等，不然如果重写了equals方法而没有重写hashCode方法的话可能会出现equals方法判断两个对象相等，但是其hashCode不相等的情况。</p><h2 id="hashmap如何解决哈希碰撞-哈希冲突-问题？"><a href="#hashmap如何解决哈希碰撞-哈希冲突-问题？" class="headerlink" title="hashmap如何解决哈希碰撞(哈希冲突)问题？"></a>hashmap如何解决哈希碰撞(哈希冲突)问题？</h2><h2 id="hashmap在存放一个键值对的时候过程是怎么样的？"><a href="#hashmap在存放一个键值对的时候过程是怎么样的？" class="headerlink" title="hashmap在存放一个键值对的时候过程是怎么样的？"></a>hashmap在存放一个键值对的时候过程是怎么样的？</h2><p>1、对键进行hash计算来确定键值存放的位置</p><p>2、通过取模运算找到具体存储哈希键值对的位置即桶</p><p>3、将键值对存储在对应的桶中，如果产生了哈希冲突就会作为一个节点存入到链表或者红黑树的头部。</p><h2 id="当hashmap转换成红黑树后什么情况下会转回链表？"><a href="#当hashmap转换成红黑树后什么情况下会转回链表？" class="headerlink" title="当hashmap转换成红黑树后什么情况下会转回链表？"></a>当hashmap转换成红黑树后什么情况下会转回链表？</h2><p>当红黑树的节点数小于等于6的时候，会转回链表的形式进行键值对的存储，因为hashCode符合泊松分布，哈希冲突造成链表长度等于6的情况比较高，且红黑树维护节点开销会比链表维护所需开销大，如果是长度等于7的情况的话，可能会导致频繁的链表和红黑树的转换开销和资源浪费。</p><blockquote><p><strong>为什么是<strong><strong>链表</strong></strong>等于8的时候转？</strong></p><p>因为经过统计，当hashCode遵循泊松分布时，因为哈希冲突造成桶的链表长度大于等于8的概率只有0.00000006，所以根据数学推算决定当链表长度等于8时转换成红黑树。而且转换成红黑树之后的维护开销会比链表高很多，所以不会随随便便进行红黑树和链表之间的互相转换。</p></blockquote><h2 id="常见集合list、map、set、queue之间的区别"><a href="#常见集合list、map、set、queue之间的区别" class="headerlink" title="常见集合list、map、set、queue之间的区别"></a>常见集合list、map、set、queue之间的区别</h2><p>list：元素有序，可重复</p><p>set：元素无序，不可重复</p><p>map：以key-value方式存储，key无序、不可重复，value无序、可重复，每个键最多映射到一个值。</p><p>queue：元素有序，可重复。</p><h2 id="关于构建一个线程池我们需要配置的核心参数有哪些？"><a href="#关于构建一个线程池我们需要配置的核心参数有哪些？" class="headerlink" title="关于构建一个线程池我们需要配置的核心参数有哪些？"></a>关于构建一个线程池我们需要配置的核心参数有哪些？</h2><p><strong><code>ThreadPoolExecutor</code></strong> <strong>3 个最重要的参数：</strong></p><ul><li><strong><code>corePoolSize</code></strong> <strong>:</strong> 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li><li><strong><code>maximumPoolSize</code></strong> <strong>:</strong> 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li><strong><code>workQueue</code>****:</strong> 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p><code>ThreadPoolExecutor</code>其他常见参数 :</p><ul><li><strong><code>keepAliveTime</code></strong>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁；</li><li><strong><code>unit</code></strong> : <code>keepAliveTime</code> 参数的时间单位。</li><li><strong><code>threadFactory</code></strong> :executor 创建新线程的时候会用到。</li><li><strong><code>handler</code></strong> :饱和策略。</li></ul><h2 id="InnoDB的索引数据结构是什么？介绍一下b-树"><a href="#InnoDB的索引数据结构是什么？介绍一下b-树" class="headerlink" title="InnoDB的索引数据结构是什么？介绍一下b+树"></a>InnoDB的索引数据结构是什么？介绍一下b+树</h2><p>B+树</p><ul><li>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I/O次数会更少。</li><li>B+ 树有大量的冗余节点（所有非叶子节点都是冗余索引），这些冗余索引让 B+ 树在插入、删除的效率都更高，比如删除根节点的时候，不会像 B 树那样会发生复杂的树的变化；</li><li>B+ 树叶子节点之间用链表连接了起来，有利于范围查询，而 B 树要实现范围查询，因此只能通过树的遍历来完成范围查询，这会涉及多个节点的磁盘 I/O 操作，范围查询效率不如 B+ 树。</li></ul><h2 id="为什么B-树千万级别在MySQL只有3-4层？"><a href="#为什么B-树千万级别在MySQL只有3-4层？" class="headerlink" title="为什么B+树千万级别在MySQL只有3-4层？"></a>为什么B+树千万级别在MySQL只有3-4层？</h2><p>非叶子结点一般只有键+指针，也就是8+6 = 14byte，那么一个非叶子结点可以存储的键+指针个数是16<em>1024/14=1170个单元数，如果一条记录是1k，那么一个节点能存16条记录，那么两层的B+树就是16 * 1170=18720条记录，3层的话就是16</em>1170*1170=2190w+条记录。</p><h2 id="Innodb的默认隔离事务级别是什么？什么是可重复读？"><a href="#Innodb的默认隔离事务级别是什么？什么是可重复读？" class="headerlink" title="Innodb的默认隔离事务级别是什么？什么是可重复读？"></a>Innodb的默认隔离事务级别是什么？什么是可重复读？</h2><p>可重复读。</p><p>指一个事务执行过程中看到的数据，一直跟这个事务启动时看到的数据是一致的</p><h2 id="在可重复读的事务隔离级别下，什么场景下会出现幻读的情况？"><a href="#在可重复读的事务隔离级别下，什么场景下会出现幻读的情况？" class="headerlink" title="在可重复读的事务隔离级别下，什么场景下会出现幻读的情况？"></a>在可重复读的事务隔离级别下，什么场景下会出现幻读的情况？</h2><p>场景一（针对快照读）：</p><p>以下表为例：</p><p><img src="https://qazbc6jrkh1.feishu.cn/space/api/box/stream/download/asynccode/?code=YThkOTc3ZDZmNzg5ZDgxNTdmYjQxNzExNDNjN2YyMWJfOTdGNnVRc2NCY0xPSGpTa2pNVWo3VDJKS1I3WTI2b0FfVG9rZW46Tzg0eWJQUVpHb0tNYTZ4TnVYRGM0dktGbkRiXzE2OTIzNjI3NDU6MTY5MjM2NjM0NV9WNA" alt="img"></p><p>事务A执行查询id = 5的记录，此时表中没有此记录，所以查不出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#事务A</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_stu <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>此时事务B添加一条id = 5的记录，并提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#事务B</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_stu <span class="keyword">values</span>(<span class="number">5</span>, <span class="string">&#x27;小美&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>此时，<strong>事务A更新id=5的记录，并查询id=5的记录，此时就能看到事务B插入的记录。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 事务 A</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> t_stu <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;小林coding&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)<span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_stu <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 小林coding   <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>时序图如下：</p><p><img src="https://qazbc6jrkh1.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjQ2YmI5MDJlMjEwNDY0MDNlN2JmYmYzM2RkOTQ1M2NfUHVJbTIybHFoWHNnVEwxMFdjdmNOZU5oUk5CU05mdFlfVG9rZW46Q2xWOGJnczV6b1o5bk14OG1Za2NaQ1h1blVlXzE2OTIzNjI3NDU6MTY5MjM2NjM0NV9WNA" alt="img"></p><p>场景二（针对当前读）：</p><ul><li>T1时刻，事务A先执行了快照读语句:select * from t_test where id &gt; 100 得到了 3 条记录;</li><li>T2时刻，事务B插入了一条id = 200的记录并提交</li><li>T3时刻，事务A执行当前读：select * from t_test where id &gt; 100;就会得到4条记录</li></ul><h2 id="Maven添加资源包的时候，如何操作？"><a href="#Maven添加资源包的时候，如何操作？" class="headerlink" title="Maven添加资源包的时候，如何操作？"></a>Maven添加资源包的时候，如何操作？</h2><p>在Maven项目中添加资源包（例如配置文件、图像文件、文本文件等）通常涉及以下步骤：</p><ol><li><p><strong>创建资源文件夹</strong>：</p><p>在项目的源代码目录（src/main/java）旁边创建一个资源文件夹，通常命名为”resources”，这是Maven默认的资源文件夹。</p></li><li><p><strong>将资源文件放入资源文件夹</strong>：</p><p>将您的资源文件（例如配置文件、图像等）放入刚刚创建的”resources”文件夹中。</p></li><li><p><strong>更新项目配置文件（pom.xml）</strong>：</p><p>打开项目的<code>pom.xml</code>文件，并在<code>&lt;build&gt;</code>标签下的<code>&lt;resources&gt;</code>标签中配置资源文件夹。示例如下：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 可选：可以配置&lt;filtering&gt;标签来进行资源文件中的属性替换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以添加多个&lt;resource&gt;标签来包含多个资源文件夹 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   此配置告诉Maven在构建项目时将资源文件夹中的内容包含在生成的JAR或WAR文件中。</p><ol start="4"><li><p><strong>运行<strong><strong>Maven</strong></strong>构建命令</strong>：</p><p>打开终端或命令提示符，进入项目根目录，然后运行以下命令来执行Maven构建：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure><p>   或者如果只需要将资源添加到生成的JAR或WAR中，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn resources:resources</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>访问资源文件</strong>：</p><p>在Java代码中，您可以使用类加载器来访问位于资源文件夹中的资源文件。例如，使用以下代码来加载资源文件：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;path/to/resource.file&quot;</span>);</span><br></pre></td></tr></table></figure><p>   其中，<code>path/to/resource.file</code>是资源文件在资源文件夹中的相对路径。</p><h2 id="Maven的常用命令有哪些？"><a href="#Maven的常用命令有哪些？" class="headerlink" title="Maven的常用命令有哪些？"></a>Maven的常用命令有哪些？</h2><h2 id="缓存雪崩、缓存和数据库一致性问题的解决方案？"><a href="#缓存雪崩、缓存和数据库一致性问题的解决方案？" class="headerlink" title="缓存雪崩、缓存和数据库一致性问题的解决方案？"></a>缓存雪崩、缓存和数据库一致性问题的解决方案？</h2><h2 id="如果此时使用的是cookie-session机制，而且是分布式系统的话，怎么实现用户鉴权问题？"><a href="#如果此时使用的是cookie-session机制，而且是分布式系统的话，怎么实现用户鉴权问题？" class="headerlink" title="如果此时使用的是cookie-session机制，而且是分布式系统的话，怎么实现用户鉴权问题？"></a>如果此时使用的是cookie-session机制，而且是分布式系统的话，怎么实现用户鉴权问题？</h2><p>1、SSO单点登录</p><p>2、集中式Session存储</p><h2 id="微布校园有遇到一些比较棘手的问题吗？如果出现问题，如何排查问题？"><a href="#微布校园有遇到一些比较棘手的问题吗？如果出现问题，如何排查问题？" class="headerlink" title="微布校园有遇到一些比较棘手的问题吗？如果出现问题，如何排查问题？"></a>微布校园有遇到一些比较棘手的问题吗？如果出现问题，如何排查问题？</h2><h2 id="当时是什么情况因为kafka挂了导致整个服务全部挂了？"><a href="#当时是什么情况因为kafka挂了导致整个服务全部挂了？" class="headerlink" title="当时是什么情况因为kafka挂了导致整个服务全部挂了？"></a>当时是什么情况因为kafka挂了导致整个服务全部挂了？</h2><h2 id="对于整个技术栈哪些组件有过深入的了解？"><a href="#对于整个技术栈哪些组件有过深入的了解？" class="headerlink" title="对于整个技术栈哪些组件有过深入的了解？"></a>对于整个技术栈哪些组件有过深入的了解？</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;如果对于jdk版本升级，对于jvm的一些参数修改有哪些？&quot;&gt;&lt;a href=&quot;#如果对于jdk版本升级，对于jvm的一些参数修改有哪些？&quot; class=&quot;headerlink&quot; title=&quot;如果对于jdk版本升级，对于jvm的一些参数修改有哪些？&quot;&gt;&lt;/a&gt;如果</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>微布开发-实现说说审核发布机制(暂未完成)</title>
    <link href="http://xiaobazeo.github.io/2023/08/09/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E5%AE%9E%E7%8E%B0%E8%AF%B4%E8%AF%B4%E5%AE%A1%E6%A0%B8%E5%8F%91%E5%B8%83%E6%9C%BA%E5%88%B6/"/>
    <id>http://xiaobazeo.github.io/2023/08/09/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E5%AE%9E%E7%8E%B0%E8%AF%B4%E8%AF%B4%E5%AE%A1%E6%A0%B8%E5%8F%91%E5%B8%83%E6%9C%BA%E5%88%B6/</id>
    <published>2023-08-09T08:04:28.000Z</published>
    <updated>2023-09-14T03:41:00.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a>业务场景：</h3><p>调用微信三方接口进行图片/视频安全校验，由于微信的视频/图片校验结果是异步返回到服务端的接口，所以需要将附有照片或者视频的说说审核通过之后再将说说发布到论坛中。</p><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p>1、如何标识所有图片/视频审核完成之后再发布呢？</p><p>因为每次向微信的接口发送请求的时候，会对每张照片的审核都会有一个任务id(trace_id)，根据这个traceid映射对应的is_valid（标识是否校验通过）和talkbid（说说的主键id）字段来标识</p><ol><li>单独拉一张表出来存储图片url和trace_id的关系，然后用一个is_valid字段根据微信接口异步返回的结果标识判断是否校验通过，如果校验通过is_valid就变成1，还在校验过程中或者校验未通过就标识0。</li><li>使用Redis通过设置超时时间来使标识自动淘汰，释放内存空间</li><li>在说说表添加一个trace_id字段，存储每张照片的trace_id，并用逗号分隔开，每次微信异步返回结果之后如果审核通过就把trace_id和返回过来的trace_id部分删除，否则就不删除，同时判断此时trace_id字段是否为空，如果等于空值了，那么就说明全部校验通过了、然后将说说详情中的is_delete(说说软删标识)字段设为0，展示到社区论坛中。</li></ol><p>3、以上标识方法会有什么问题呢？为什么最终选用对说说详情表添加字段的方式进行标识呢？</p><p>第一种方法，需要单独创建一个表，会占用一定的磁盘空间，以及MySQL需要花费更大的空间进行维护造成一定的资源浪费。</p><p>第二种方法，Redis是基于内存的一种缓存数据库，如果当有大量的io操作的时候，就会占用内存空间，这个时候很可能会出现Redis崩盘的情况，甚至说Redis宕机，因为微布校园现在是单体架构，暂时无解，只能放弃这个想法了。</p><p>第三种方法，毕竟只是添加一个字段，MySQL的维护成本相对第一种就比较低了，对于第二种方案，数据的读取，MySQL 通常会使用缓冲池（Buffer Pool）来管理数据在内存中的存储。数据会根据需要从磁盘加载到缓冲池中，并且在查询时尽量从缓冲池中读取数据，从而避免频繁的磁盘 I/O 操作。如果数据在缓冲池中已经存在，查询时可以直接从内存中读取，这比从磁盘读取要快得多。反正在读取的时候，要用缓冲池的机制将数据放到内存中，再从缓冲池中读取数据，这样相对单独用Redis去维护标识会好很多。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;业务场景：&quot;&gt;&lt;a href=&quot;#业务场景：&quot; class=&quot;headerlink&quot; title=&quot;业务场景：&quot;&gt;&lt;/a&gt;业务场景：&lt;/h3&gt;&lt;p&gt;调用微信三方接口进行图片/视频安全校验，由于微信的视频/图片校验结果是异步返回到服务端的接口，所以需要将附有照片或者</summary>
      
    
    
    
    
    <category term="微布开发思路总结" scheme="http://xiaobazeo.github.io/tags/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>微布开发-优化UGC消息拉取响应速度</title>
    <link href="http://xiaobazeo.github.io/2023/08/09/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E4%BC%98%E5%8C%96UGC%E6%B6%88%E6%81%AF%E6%8B%89%E5%8F%96%E5%93%8D%E5%BA%94%E9%80%9F%E5%BA%A6/"/>
    <id>http://xiaobazeo.github.io/2023/08/09/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E4%BC%98%E5%8C%96UGC%E6%B6%88%E6%81%AF%E6%8B%89%E5%8F%96%E5%93%8D%E5%BA%94%E9%80%9F%E5%BA%A6/</id>
    <published>2023-08-09T05:06:18.000Z</published>
    <updated>2023-09-14T03:39:13.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a><strong>业务场景：</strong></h3><p>小程序端消息通知tab页中点赞通知列表、新粉丝通知列表、评论通知列表等UGC消息接口响应速度高达7s左右，经排查问题优化之后响应时间从7s优化至200ms以内，效果展示图如下：</p><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/21e92934251b02be0db37da32b9fb0d.png" alt="21e92934251b02be0db37da32b9fb0d"></p><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/04311382a71018148382f9092cfdc5f.png" alt="04311382a71018148382f9092cfdc5f"></p><h3 id="问题分析及排查："><a href="#问题分析及排查：" class="headerlink" title="问题分析及排查："></a><strong>问题分析及排查：</strong></h3><p>1、索引问题？</p><p>刚开始以为是数据量太大且没有添加索引导致查询速度很慢从而导致接口反映速度很慢，但是一看数据量也不是很大，而且也有通过添加索引（是通过receiverBid（接受者的主键id）创建）的手段，并且通过<code>explain</code>语句分析我所写的语句走了索引，因此排除索引问题。</p><p>2、业务逻辑代码问题？</p><p>后面去查看业务代码、发现业务代码中除了分页查询UGC消息列表、还有一个同步的修改UGC消息读取状态的操作，也就是当用户拉取了UGC消息之后，将未读的记录转变成已读状态，一看到这里发现是两个同步操作，就赶紧通过<strong>打日志的方式</strong>判断查询操作和修改操作所耗时间，来进一步确定究竟是哪里出了问题，查看日志发现真的是因为修改操作耗时太多（为什么MySQL写操作比读操作慢？）导致的，那既然这样，我当时就想到了两个思路，1、通过一个事务来进行批量的修改操作，不过还是采取同步，但是我感觉这样如果批量同步修改的话，如果修改的数据太多，可能效率没太大提升，于是第二个想法就是在批量操作的基础上采用异步的方式，让这个修改操作打入kafka中异步化，进一步提高接口响应速率。</p><p>3、如果异步修改操作失败怎么办？根据什么判断失败？</p><p>可以根据Mybatis的Example类update方法返回的int值进行判断，如果大于0说明操作成功如果小于0则采取重试机制，重新打入kafka进行重新消费。</p><h3 id="开发思路："><a href="#开发思路：" class="headerlink" title="开发思路："></a>开发思路：</h3><p>1、根据前端穿过来的参数进行查询UGC消息列表操作，并筛选出status字段是UNREAD状态的记录传给kafka生产者的业务逻辑方法。</p><p>2、编写kafka生产者将修改操作的消息写入kafka，并编写消费者对这个消息进行消费。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;业务场景：&quot;&gt;&lt;a href=&quot;#业务场景：&quot; class=&quot;headerlink&quot; title=&quot;业务场景：&quot;&gt;&lt;/a&gt;&lt;strong&gt;业务场景：&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;小程序端消息通知tab页中点赞通知列表、新粉丝通知列表、评论通知列表等UGC消息接</summary>
      
    
    
    
    
    <category term="微布开发思路总结" scheme="http://xiaobazeo.github.io/tags/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>微布开发-将说说记录的图片url单独提出来用一个表存储的设计</title>
    <link href="http://xiaobazeo.github.io/2023/08/07/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E5%B0%86%E8%AF%B4%E8%AF%B4%E8%AE%B0%E5%BD%95%E7%9A%84%E5%9B%BE%E7%89%87url%E5%8D%95%E7%8B%AC%E6%8F%90%E5%87%BA%E6%9D%A5%E7%94%A8%E4%B8%80%E4%B8%AA%E8%A1%A8%E5%AD%98%E5%82%A8/"/>
    <id>http://xiaobazeo.github.io/2023/08/07/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E5%B0%86%E8%AF%B4%E8%AF%B4%E8%AE%B0%E5%BD%95%E7%9A%84%E5%9B%BE%E7%89%87url%E5%8D%95%E7%8B%AC%E6%8F%90%E5%87%BA%E6%9D%A5%E7%94%A8%E4%B8%80%E4%B8%AA%E8%A1%A8%E5%AD%98%E5%82%A8/</id>
    <published>2023-08-06T16:52:22.000Z</published>
    <updated>2023-09-14T03:35:14.684Z</updated>
    
    <content type="html"><![CDATA[<p>这样的目的是为了后续方便说说附带的图片进行修改以及调用三方接口校验图片是否违规。</p><p><strong>大概表设计如下：</strong></p><p><img src="https://pengzihao166.oss-cn-beijing.aliyuncs.com/blog/622ed5483de15a276879cab129b21cb.png" alt="622ed5483de15a276879cab129b21cb"></p><p><strong>怎么转移说说表的pics字段的<strong><strong>url</strong></strong>到新的y_talk_images字段呢？</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> y_talk_images (talk_bid, images_url, user_bid, trace_id, is_valid, is_delete, create_time)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    bid,</span><br><span class="line">    SUBSTRING_INDEX(SUBSTRING_INDEX(pics, <span class="string">&#x27;,&#x27;</span>, numbers.n), <span class="string">&#x27;,&#x27;</span>, <span class="number">-1</span>) <span class="keyword">AS</span> images_url,</span><br><span class="line">    y_talk.user_bid,</span><br><span class="line">    <span class="keyword">NULL</span> <span class="keyword">AS</span> trace_id,</span><br><span class="line">    <span class="number">1</span> <span class="keyword">AS</span> is_valid,</span><br><span class="line">    <span class="number">0</span> <span class="keyword">AS</span> is_delete,</span><br><span class="line">    y_talk.create_time <span class="comment">-- 使用此图片对应的说说创建时间作为创建时间</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="number">1</span> n <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">2</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">3</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">4</span></span><br><span class="line">     <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">5</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">6</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">7</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">8</span></span><br><span class="line">     <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> <span class="number">9</span>) numbers</span><br><span class="line"><span class="keyword">JOIN</span> y_talk <span class="keyword">ON</span> <span class="keyword">CHAR_LENGTH</span>(pics) <span class="operator">-</span> <span class="keyword">CHAR_LENGTH</span>(REPLACE(pics, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) <span class="operator">&gt;=</span> numbers.n <span class="operator">-</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    pics <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> pics <span class="operator">!=</span> <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>xxxxxxxxxx   uploadAllPics(selectedImages, index) {  //fileListPicStorage 和fileList 都是用于展示组件的时候用的，主要就是存储上传之后的图片url    const { fileListPicStorage = [] } = this.data    const { fileList = [] } = this.data    return new Promise((resolve, reject) =&gt; {      if (index &gt;= selectedImages.length) {        // 所有图片上传完成        resolve()        return      }      console.log(selectedImages)      const image = selectedImages[index]      console.log(image)      wx.uploadFile({        url: app.globalData.url + app.globalData.apiVersion + ‘/upload’, // 替换成后端上传接口的URL        filePath: image.url, // 图片文件的本地路径        name: ‘file’, // 后端接收图片的字段名        header: {          ‘Content-Type’: ‘multipart/form-data’,          token: wx.getStorageSync(‘token’),        },        success: res =&gt; {          // 图片上传成功后的处理          console.log(‘图片上传成功’, res)          let data = JSON.parse(res.data)          fileList.push(data.data.result)          fileListPicStorage.push({            url:              ‘******’ +//****代表图片url的前半部分，因为后端返回的都是后半部分url，需要前端自己补上前半部分的url              data.data.result,          })          this.setData({ fileList, fileListPicStorage })          // 继续上传下一张图片          this.uploadAllPics(selectedImages, index + 1)            .then(resolve)            .catch(reject)        },        fail: error =&gt; {          // 处理上传失败情况          console.error(‘图片上传失败’, error)​          // 继续上传下一张图片          this.uploadAllPics(selectedImages, index + 1)            .then(resolve)            .catch(reject)        },      })    })  },  //选择照片就上传9张照片  async afterRead(event) {    app.showLoading(‘图片上传中’)    const that = this    //获取照片本地位置的文件数组    //console.log(event)    const { file } = event.detail    console.log(file)    try {      //选择完并点击确认之后开始上传图片      await this.uploadAllPics(file, 0)      console.log(‘所有图片上传完成’)      wx.hideLoading()    } catch (error) {      console.error(‘图片上传失败’, error)    }  },JavaScript</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> y_talk_images (</span><br><span class="line">id <span class="type">INT</span> ( <span class="number">11</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">image_bid <span class="type">VARCHAR</span> ( <span class="number">255</span> ) COMMENT <span class="string">&#x27;图片的主键id&#x27;</span>,</span><br><span class="line">talk_bid <span class="type">VARCHAR</span> ( <span class="number">255</span> ) COMMENT <span class="string">&#x27;此图片对应的说说的主键id&#x27;</span>,</span><br><span class="line">images_url <span class="type">VARCHAR</span> ( <span class="number">1024</span> ) COMMENT <span class="string">&#x27;图片的url&#x27;</span>,</span><br><span class="line">user_bid <span class="type">VARCHAR</span> ( <span class="number">255</span> ) COMMENT <span class="string">&#x27;发布者的主键id&#x27;</span>,</span><br><span class="line">open_id <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;微信id&#x27;</span>,</span><br><span class="line">trace_id <span class="type">VARCHAR</span> ( <span class="number">50</span> ) COMMENT <span class="string">&#x27;每张照片微信接口校验时返回的任务id&#x27;</span>,</span><br><span class="line">is_valid <span class="type">INT</span> ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;是否通过校验，0待审核，1审核通过，2审核不通过&#x27;</span>,</span><br><span class="line">is_delete <span class="type">INT</span> ( <span class="number">1</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;图片url是否被软删除&#x27;</span>,</span><br><span class="line">create_time datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY ( `id` ) <span class="keyword">USING</span> BTREE </span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这样的目的是为了后续方便说说附带的图片进行修改以及调用三方接口校验图片是否违规。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大概表设计如下：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pengzihao166.oss-cn-beijing.aliyuncs.c</summary>
      
    
    
    
    
    <category term="微布开发思路总结" scheme="http://xiaobazeo.github.io/tags/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>微布开发-上传多张图片控制上传顺序</title>
    <link href="http://xiaobazeo.github.io/2023/08/04/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E4%B8%8A%E4%BC%A0%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E6%8E%A7%E5%88%B6%E4%B8%8A%E4%BC%A0%E9%A1%BA%E5%BA%8F/"/>
    <id>http://xiaobazeo.github.io/2023/08/04/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91-%E4%B8%8A%E4%BC%A0%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%E6%8E%A7%E5%88%B6%E4%B8%8A%E4%BC%A0%E9%A1%BA%E5%BA%8F/</id>
    <published>2023-08-04T07:58:14.000Z</published>
    <updated>2023-09-14T03:35:14.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="开发思路："><a href="#开发思路：" class="headerlink" title="开发思路："></a>开发思路：</h3><p>串行上传：在前端逐个上传图片，并等待上一个图片上传成功后再上传下一个图片，以保持上传顺序。</p><blockquote><p>刚开始开发是通过一个for循环依次上传，没有考虑到可能因为图片大小、网络等原因导致后端返回的url顺序不一致，可以理解成多并发上传的时候而导致的顺序问题</p></blockquote><h3 id="代码大致实现："><a href="#代码大致实现：" class="headerlink" title="代码大致实现："></a>代码大致实现：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">uploadAllPics</span>(<span class="params">selectedImages, index</span>) &#123;</span><br><span class="line"><span class="comment">//fileListPicStorage 和fileList 都是用于展示组件的时候用的，主要就是存储上传之后的图片url</span></span><br><span class="line">  <span class="keyword">const</span> &#123; fileListPicStorage = [] &#125; = <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">  <span class="keyword">const</span> &#123; fileList = [] &#125; = <span class="variable language_">this</span>.<span class="property">data</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= selectedImages.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="comment">// 所有图片上传完成</span></span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(selectedImages)</span><br><span class="line">    <span class="keyword">const</span> image = selectedImages[index]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(image)</span><br><span class="line">    wx.<span class="title function_">uploadFile</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: app.<span class="property">globalData</span>.<span class="property">url</span> + app.<span class="property">globalData</span>.<span class="property">apiVersion</span> + <span class="string">&#x27;/upload&#x27;</span>, <span class="comment">// 替换成后端上传接口的URL</span></span><br><span class="line">      <span class="attr">filePath</span>: image.<span class="property">url</span>, <span class="comment">// 图片文件的本地路径</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;file&#x27;</span>, <span class="comment">// 后端接收图片的字段名</span></span><br><span class="line">      <span class="attr">header</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>,</span><br><span class="line">        <span class="attr">token</span>: wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;token&#x27;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">success</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 图片上传成功后的处理</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;图片上传成功&#x27;</span>, res)</span><br><span class="line">        <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res.<span class="property">data</span>)</span><br><span class="line">        fileList.<span class="title function_">push</span>(data.<span class="property">data</span>.<span class="property">result</span>)</span><br><span class="line">        fileListPicStorage.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>:</span><br><span class="line">            <span class="string">&#x27;******&#x27;</span> +<span class="comment">//****代表图片url的前半部分，因为后端返回的都是后半部分url，需要前端自己补上前半部分的url</span></span><br><span class="line">            data.<span class="property">data</span>.<span class="property">result</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123; fileList, fileListPicStorage &#125;)</span><br><span class="line">        <span class="comment">// 继续上传下一张图片</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">uploadAllPics</span>(selectedImages, index + <span class="number">1</span>)</span><br><span class="line">          .<span class="title function_">then</span>(resolve)</span><br><span class="line">          .<span class="title function_">catch</span>(reject)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理上传失败情况</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;图片上传失败&#x27;</span>, error)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继续上传下一张图片</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">uploadAllPics</span>(selectedImages, index + <span class="number">1</span>)</span><br><span class="line">          .<span class="title function_">then</span>(resolve)</span><br><span class="line">          .<span class="title function_">catch</span>(reject)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//选择照片就上传9张照片</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">afterRead</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  app.<span class="title function_">showLoading</span>(<span class="string">&#x27;图片上传中&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">  <span class="comment">//获取照片本地位置的文件数组</span></span><br><span class="line">  <span class="comment">//console.log(event)</span></span><br><span class="line">  <span class="keyword">const</span> &#123; file &#125; = event.<span class="property">detail</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(file)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//选择完并点击确认之后开始上传图片</span></span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">uploadAllPics</span>(file, <span class="number">0</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有图片上传完成&#x27;</span>)</span><br><span class="line">    wx.<span class="title function_">hideLoading</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;图片上传失败&#x27;</span>, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;开发思路：&quot;&gt;&lt;a href=&quot;#开发思路：&quot; class=&quot;headerlink&quot; title=&quot;开发思路：&quot;&gt;&lt;/a&gt;开发思路：&lt;/h3&gt;&lt;p&gt;串行上传：在前端逐个上传图片，并等待上一个图片上传成功后再上传下一个图片，以保持上传顺序。&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    
    <category term="微布开发思路总结" scheme="http://xiaobazeo.github.io/tags/%E5%BE%AE%E5%B8%83%E5%BC%80%E5%8F%91%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>面经-北森后端开发实习一面(线程安全和锁未完成)</title>
    <link href="http://xiaobazeo.github.io/2023/08/03/%E9%9D%A2%E7%BB%8F-%E5%8C%97%E6%A3%AE%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/"/>
    <id>http://xiaobazeo.github.io/2023/08/03/%E9%9D%A2%E7%BB%8F-%E5%8C%97%E6%A3%AE%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E9%9D%A2/</id>
    <published>2023-08-02T17:05:15.000Z</published>
    <updated>2023-08-09T04:52:57.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么离开了法大大实习？"><a href="#为什么离开了法大大实习？" class="headerlink" title="为什么离开了法大大实习？"></a>为什么离开了法大大实习？</h3><p>阿巴阿巴阿巴。。。。。</p><h3 id="为什么当时要用kafka进行UGC消息推送？业务场景是什么？"><a href="#为什么当时要用kafka进行UGC消息推送？业务场景是什么？" class="headerlink" title="为什么当时要用kafka进行UGC消息推送？业务场景是什么？"></a>为什么当时要用kafka进行UGC消息推送？业务场景是什么？</h3><p><strong>原因：</strong></p><ol><li>kakfa是一个高吞吐、低延迟的消息队列，UGC消息需要实时推送给其他用户，比如评论、点赞等，因此kafka可以确保消息被快速处理，从而提供更好的实时性和用户体验。</li><li>因为kafka 的可靠性比较高、消息会被持久化在磁盘上，确保消息不会丢失。</li><li>因为kafka可以支持多个消费组和分区，UGC在高并发的情况下需要处理大量的消息，而kafka可以轻松应对高负载和大规模的UGC</li><li>解耦异步，主要是因为异步的特性，不会因为同步处理的方式导致主线程阻塞，导致性能下降。使用消息队列，可以将这些操作封装成消息，放入消息队列中，异步处理这些操作，不影响主线程的执行，提高系统性能和响应速度。</li></ol><h3 id="kafka的生产和消费逻辑？"><a href="#kafka的生产和消费逻辑？" class="headerlink" title="kafka的生产和消费逻辑？"></a>kafka的生产和消费逻辑？</h3><p>生产实现逻辑：</p><p>1、连接到kafka集群，创建一个producer</p><p>2、生产者通过producer对象将消息发送到指定的topic。消息可以包含键和值，键可以帮助消息路由到特定的分区，如果没有特定的key就会通过自带的负载均衡机制选择一个分区。</p><p>3、通过key实现分区，指定了键的话将使用哈希函数映射到对应的分区，保证相同键的消息将始终被写入相同的分区，从而也可以保持消息的顺序。</p><p>4、生产者发送消息也会把消息持久化到磁盘，即使消息被消费，他也会根据kafka的配置的保留时间内保留在磁盘中。</p><p>消费实现逻辑：</p><p>1、消费者连接到kafka集群，创建一个consumer对象，并订阅一个或者多个主题</p><p>2、消费者使用consumer从指定的主题中拉取消息，其中消费者可以选择从分区的起始位置开始消费或者从上次消费的偏移量继续消费。</p><p>3、进行消息分配的时候，由于每个topic可能有多个partition，多个消费者可以同时消费同一个topic不同的partition，实现负载均衡和并行处理。（这时候可能会有一个问题，一个消费者组可以消费同一个分区吗？为什么每个分区只能被消费者组中的一个消费者消费？一个消费组可以同时消费不同的分区吗？）</p><h3 id="当时开发的过程中，kafka采用的路由分区策略是什么？"><a href="#当时开发的过程中，kafka采用的路由分区策略是什么？" class="headerlink" title="当时开发的过程中，kafka采用的路由分区策略是什么？"></a>当时开发的过程中，kafka采用的路由分区策略是什么？</h3><p>使用的默认的分区策略</p><p>就是会使用消息的key进行哈希，然后根据哈希值对分区总数取模得到一个分区号，将消息路由到对应的分区。这样就可以保证具有相同key的消息被写入同一个分区，保证消息有序。</p><h3 id="kafka如何保证顺序消费？"><a href="#kafka如何保证顺序消费？" class="headerlink" title="kafka如何保证顺序消费？"></a>kafka如何保证顺序消费？</h3><p>保证相关消息都发送到同一个分区这样就可以保证有序了，即通过一个partition消费对应的消息，因为生产者发送消息的时候，消息会逐一添加到该partition的日志中，并会分配一个唯一的offset，以保证从此offset开始进行消息的消费，从而保证消息顺序的有序性。</p><h3 id="如果kafka消息阻塞的话怎么处理？"><a href="#如果kafka消息阻塞的话怎么处理？" class="headerlink" title="如果kafka消息阻塞的话怎么处理？"></a>如果kafka消息阻塞的话怎么处理？</h3><p><strong>生产者角度：</strong></p><p>可能是因为生产者的生产速率太快导致，超过了消费者的消费能力，可以通过控制生产者的生产速率来适配消费者的处理速率</p><p><strong>消费者角度：</strong></p><p>可以创建多个消费者组或消费者实例，对不同的topic下不同的partition进行消费，但是最好是一个partition只被一个消费者消费，但一个消费者可以消费多个partition。</p><p><strong>硬件存储问题：</strong></p><p>由于存储空间满了，导致消息无法写入，因此消费者也无法进行消费，清空一定的磁盘空间即可。</p><h3 id="kafka是怎么保证主从副本的数据一致性？"><a href="#kafka是怎么保证主从副本的数据一致性？" class="headerlink" title="kafka是怎么保证主从副本的数据一致性？"></a>kafka是怎么保证主从副本的数据一致性？</h3><p>1、生产者向kafka的主副本发送消息，主副本会将消息追加到日志里面，进行持久化操作，并将消息分发给从副本。</p><p>2、从副本会周期性从主副本拉取数据保存到自己的本地log以保证同步。</p><p>3、ISR机制（最重要的一点）：Kafka会维护一个ISR的集合，它保存了相对主副本实时同步的从副本，如果某个从副本没有跟上主副本的进度，就会被移出ISR机制，直到它后面又跟上主副本的进度之后才会回到ISR集合中。</p><p>4、当所有ISR的从副本都确认收到了消息，这时候主副本就会把消息标记为已提交，意味着消息写入了足够多的副本中，确保数据的可靠性。</p><h3 id="如果主副本没了、这时候会怎么选择从副本？"><a href="#如果主副本没了、这时候会怎么选择从副本？" class="headerlink" title="如果主副本没了、这时候会怎么选择从副本？"></a>如果主副本没了、这时候会怎么选择从副本？</h3><p>会从ISR中同步的从副本选择作为主副本，然后此时被选举成为主副本的副本就会同步消息到其他的从副本中，来保证数据同步和备份。</p><h3 id="消息丢失的场景有哪些？以及怎么去解决这个问题？"><a href="#消息丢失的场景有哪些？以及怎么去解决这个问题？" class="headerlink" title="消息丢失的场景有哪些？以及怎么去解决这个问题？"></a>消息丢失的场景有哪些？以及怎么去解决这个问题？</h3><ul><li>生产者丢失消息<ul><li>生产者使用producer.send方法的时候，因为这个方法是异步的，会立即返回，如果此时出现了网络波动就会出现消息丢失的情况，导致Broker并没有接收到生产者发过来的消息</li></ul></li><li>Kafka Broker 服务端丢失消息<ul><li>如果因为leader broker宕机了触发选举过程，集群选举了一个落后的leader之后就会出现消息丢失的情况。</li><li>由于broker持久化消息需要先通过写入页缓存，再从页缓存写入磁盘，即通过异步批量刷盘的方式写入磁盘，也就是说需要消息达到一定的量和时间间隔才会去刷盘，具体的刷盘操作一般是由操作系统调度，如果刷盘之前导致broker宕机了也会出现消息丢失的情况。</li></ul></li><li>消费者丢失消息<ul><li>拉取消息之后，先提交offset，后处理消息：如果处理消息的时候突然宕机或者处理错误，但是此时offset又已经提交，等消费者重启恢复之后，就会从offset的下一个开始消费，之前未处理完的消息就会不再做处理，这时候对于消费者来说就是消息丢失了。</li><li>拉取消息之后，先处理消息，再提交offset：如果消息已经处理好了，但是要提交offset的时候突然宕机了，这时候重启服务，就会出现消费者会重新拉取上次消费了的消息进行再次消费的情况，此时会出现重复消费的情况或者直接丢失消息。</li></ul></li></ul><h3 id="有没有调用过一些三方接口？怎么实现的？"><a href="#有没有调用过一些三方接口？怎么实现的？" class="headerlink" title="有没有调用过一些三方接口？怎么实现的？"></a>有没有调用过一些三方接口？怎么实现的？</h3><p>1、文本审核内容审核</p><p>2、音视频内容审核</p><h3 id="对于微信接口的AccessToken怎么处理那个有效时间无效问题？"><a href="#对于微信接口的AccessToken怎么处理那个有效时间无效问题？" class="headerlink" title="对于微信接口的AccessToken怎么处理那个有效时间无效问题？"></a>对于微信接口的AccessToken怎么处理那个有效时间无效问题？</h3><p>定时刷新，将对应的AccessToken存在Redis里面，每次需要使用的时候，先从缓存中找，如果缓存中的东西失效了，那么就重新获取一次token进行令牌刷新并存在Redis里面，但是存取的时间是6000s，防止处理事务处理过程中出现失效的情况。</p><h3 id="如果服务器CPU或者内存满了怎么分析？"><a href="#如果服务器CPU或者内存满了怎么分析？" class="headerlink" title="如果服务器CPU或者内存满了怎么分析？"></a>如果服务器CPU或者内存满了怎么分析？</h3><p>1、使用监控工具确定是什么资源占用率高</p><p>2、使用系统工具查看占用cpu高的进程</p><p>3、查看日志找到异常或者错误信息，来定位具体是什么地方导致线程阻塞从而导致的cpu飙升，并及时优化代码。</p><h3 id="对于高并发问题，要怎么处理数据的一致性问题以及保证线程安全？"><a href="#对于高并发问题，要怎么处理数据的一致性问题以及保证线程安全？" class="headerlink" title="对于高并发问题，要怎么处理数据的一致性问题以及保证线程安全？"></a>对于高并发问题，要怎么处理数据的一致性问题以及保证线程安全？</h3><p><strong>解决方案：</strong></p><ul><li>使用并发容器，如ConcurrentHashMap，它是线程安全的数据结构，可用于高并发场景。</li><li>通过分布式锁的方式，保证数据一致性，确保在同一时间只有一个线程可以访问共享资源。</li><li>根据业务需求，设置合适的数据库隔离级别，如读未提交、读已提交、可重复读、串行化，以保证数据的一致性和隔离性。</li></ul><h3 id="常用的锁有哪些？"><a href="#常用的锁有哪些？" class="headerlink" title="常用的锁有哪些？"></a>常用的锁有哪些？</h3><h3 id="介绍一下互斥锁、自旋锁"><a href="#介绍一下互斥锁、自旋锁" class="headerlink" title="介绍一下互斥锁、自旋锁"></a>介绍一下互斥锁、自旋锁</h3><p>互斥锁：用于保护共享资源，同一时间只允许一个线程访问共享资源，其他线程需要等待锁的释放。</p><h3 id="Redis的Set扩容机制如何实现？"><a href="#Redis的Set扩容机制如何实现？" class="headerlink" title="Redis的Set扩容机制如何实现？"></a>Redis的Set扩容机制如何实现？</h3><p>1、当Set元素数量达到一定的阈值的时候，创建新的哈希表</p><p>2、Redis会逐一将原来哈希表的元素根据新的哈希映射函数分配到新的哈希表中</p><p>3、更新指针，这个指针指向的是存储哈希表的内存地址，以便在扩容过程中可以正确地切换到新的哈希表。</p><h3 id="介绍一下hashmap以及如何解决哈希冲突的？"><a href="#介绍一下hashmap以及如何解决哈希冲突的？" class="headerlink" title="介绍一下hashmap以及如何解决哈希冲突的？"></a>介绍一下hashmap以及如何解决哈希冲突的？</h3><p>问烂了、已经不想打字了，补充几个其他相关的题</p><h4 id="为什么hashmap要在红黑树节点小于等于6的时候转回链表？"><a href="#为什么hashmap要在红黑树节点小于等于6的时候转回链表？" class="headerlink" title="为什么hashmap要在红黑树节点小于等于6的时候转回链表？"></a>为什么hashmap要在红黑树节点小于等于6的时候转回链表？</h4><ul><li>最主要的原因是因为节点数小于等于6的时候，链表和红黑树查询平均时间复杂度几乎一样，都是O（n），在性能差异不大的情况下，红黑树的维护成本远远大于链表的维护成本。</li><li>根据概率论的泊松分布，造成哈希冲突导致桶的的链表长度等于6的概率很大，而查询的平均复杂度和红黑树一样，在同等效率下选择开销更小的链表结构。</li></ul><h4 id="为什么hashmap负载因子是0-75？"><a href="#为什么hashmap负载因子是0-75？" class="headerlink" title="为什么hashmap负载因子是0.75？"></a>为什么hashmap负载因子是0.75？</h4><p>1、避免频繁扩容带来的性能损失</p><p>2、提高空间利用率，负载因子 = 存储的元素数量 / 哈希表可存储元素的总数量</p><p>3、较小的负载因子能够减少哈希冲突，提高性能，这也是经验之谈。</p><h4 id="哈希扩容的时候，是根据什么来扩容的？"><a href="#哈希扩容的时候，是根据什么来扩容的？" class="headerlink" title="哈希扩容的时候，是根据什么来扩容的？"></a>哈希扩容的时候，是根据什么来扩容的？</h4><p>元素数量 / 哈希表的容量与负载因子进行比较，</p><h3 id="索引失效有哪些？"><a href="#索引失效有哪些？" class="headerlink" title="索引失效有哪些？"></a>索引失效有哪些？</h3><p>6种，左右模糊或左模糊，对索引使用函数，对索引隐式类型转换（查询的时候数据类型转换，实际上会用到函数CAST），对索引进行表达式计算(where id + 1 = 10不行)，联合索引非左匹配原则，where子句有OR</p><p>对索引使用函数，对索引隐式类型转换（查询的时候数据类型转换，实际上会用到函数CAST），对索引进行表达式计算(where id + 1 = 10不行)，这三种造成失效的原因就是索引存的是原始的值，而不是使用函数或者通过计算得到的新的值，如果建立对某个字段使用函数或者计算的索引来解决这个问题。例如建立索引<code>alter table t_user add key idx_name_length ((length(name)));</code></p><h3 id="介绍一些JWT，比较一下和Cookie-Session的区别？"><a href="#介绍一些JWT，比较一下和Cookie-Session的区别？" class="headerlink" title="介绍一些JWT，比较一下和Cookie-Session的区别？"></a>介绍一些JWT，比较一下和Cookie-Session的区别？</h3><p>阿巴阿巴阿巴。。。。。</p><h3 id="JWT是怎么解决防篡改问题的？"><a href="#JWT是怎么解决防篡改问题的？" class="headerlink" title="JWT是怎么解决防篡改问题的？"></a>JWT是怎么解决防篡改问题的？</h3><p>阿巴阿巴阿巴。。。。。</p><h3 id="介绍一下如何判断死亡对象的方法以及垃圾收集算法"><a href="#介绍一下如何判断死亡对象的方法以及垃圾收集算法" class="headerlink" title="介绍一下如何判断死亡对象的方法以及垃圾收集算法"></a>介绍一下如何判断死亡对象的方法以及垃圾收集算法</h3><p><strong>判断对象死亡的方法：</strong></p><ol><li>引用计数法：当被引用了就计数+1，引用失效就-1，当计数器的值==0就说明此对象已经死亡。</li><li>可达性分析算法：如果某个对象不能有一条路径到达GC ROOTS，如果没有的话，就说明这个对象已经死亡，有的话就说明，这个对象没有死亡。</li></ol><blockquote><p>这个时候实际上只能表示对象可以回收了，但是不一定代表着一定会回收，宣布一个对象死亡，要进行两次标记，可达性分析算法中不可达对象就会先第一次被标记并进行一次筛选，筛选条件就是此对象是否有必要执行finalize()，如果finalize()方法没有被覆盖，或者被虚拟栈调用过了，就会被认为没有必要被执行。被判定需要执行的对象就会被放入一个队列进行二次标记，除非这个对象跟引用链上的任何一个对象建立关联，否则就会被回收。</p></blockquote><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><blockquote><p><strong>简介</strong></p><ul><li>进程：计算机正在运行的一个程序实例，比如打开微信</li><li>线程：又称轻量级进程，多个线程可以在同一个进程中同时执行，并且共享进程的资源比如：内存空间、网络连接等，举例：你打开的微信就有一个线程专门用来拉取别人发你的最新的消息。</li></ul></blockquote><ol><li>一个进程可以产生多个线程，多个进程间共享堆和方法区，每个线程自己独立的程序计数器、虚拟机栈和本地方法栈。</li><li>进程线程最大的不同就是各进程是独立的，而线程不一定因为同一进程中的线程极有可能会相互影响。</li><li>线程执行开销小，不利于资源的管理和保护但是进程相反。</li></ol><h3 id="介绍一下协程（不会）"><a href="#介绍一下协程（不会）" class="headerlink" title="介绍一下协程（不会）"></a>介绍一下协程（不会）</h3><p>协程是相较于线程更加轻量级的一种执行单位，协程通常不会被内核调度所以协程切换不会涉及内核级的上下文切换，核心思想就是可以暂停和回复的执行单元，一个可以在某一个点挂起，然后执行权交给其他协程，等其他协程执行完毕之后可以恢复，从挂起的地方继续执行。</p><p>协程的并行数也受限于CPU的核心数，多个协程在同一线程中交替执行，充分利用了单线程的资源。但协程并发的时候可以通过调度器来控制哪个协程何时执行。</p><h3 id="平时怎么学习的？"><a href="#平时怎么学习的？" class="headerlink" title="平时怎么学习的？"></a>平时怎么学习的？</h3><p>阿巴阿巴阿巴阿巴阿巴阿巴。。。</p><h3 id="了不了解ElasticSearch？（并不了解）"><a href="#了不了解ElasticSearch？（并不了解）" class="headerlink" title="了不了解ElasticSearch？（并不了解）"></a>了不了解ElasticSearch？（并不了解）</h3><p>所以无解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;为什么离开了法大大实习？&quot;&gt;&lt;a href=&quot;#为什么离开了法大大实习？&quot; class=&quot;headerlink&quot; title=&quot;为什么离开了法大大实习？&quot;&gt;&lt;/a&gt;为什么离开了法大大实习？&lt;/h3&gt;&lt;p&gt;阿巴阿巴阿巴。。。。。&lt;/p&gt;
&lt;h3 id=&quot;为什么当时要</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经-七牛云测试开发实习一二面</title>
    <link href="http://xiaobazeo.github.io/2023/08/02/%E9%9D%A2%E7%BB%8F-%E4%B8%83%E7%89%9B%E4%BA%91%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%BA%8C%E9%9D%A2/"/>
    <id>http://xiaobazeo.github.io/2023/08/02/%E9%9D%A2%E7%BB%8F-%E4%B8%83%E7%89%9B%E4%BA%91%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E4%B8%80%E4%BA%8C%E9%9D%A2/</id>
    <published>2023-08-02T03:37:32.000Z</published>
    <updated>2023-08-02T03:48:32.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><h3 id="微布校园的分工如何？"><a href="#微布校园的分工如何？" class="headerlink" title="微布校园的分工如何？"></a>微布校园的分工如何？</h3><h3 id="在开发过程中学到了什么？遇到了什么难的问题？"><a href="#在开发过程中学到了什么？遇到了什么难的问题？" class="headerlink" title="在开发过程中学到了什么？遇到了什么难的问题？"></a>在开发过程中学到了什么？遇到了什么难的问题？</h3><h3 id="如何解决缓存雪崩、缓存与数据库一致性问题？"><a href="#如何解决缓存雪崩、缓存与数据库一致性问题？" class="headerlink" title="如何解决缓存雪崩、缓存与数据库一致性问题？"></a>如何解决缓存雪崩、缓存与数据库一致性问题？</h3><h3 id="查询响应速度从超时响应加快到900ms-1s是如何实现的？"><a href="#查询响应速度从超时响应加快到900ms-1s是如何实现的？" class="headerlink" title="查询响应速度从超时响应加快到900ms~1s是如何实现的？"></a>查询响应速度从超时响应加快到900ms~1s是如何实现的？</h3><h3 id="讲一下雪花算法（当时从组成，为什么可以作为分布式id角度回答）"><a href="#讲一下雪花算法（当时从组成，为什么可以作为分布式id角度回答）" class="headerlink" title="讲一下雪花算法（当时从组成，为什么可以作为分布式id角度回答）"></a>讲一下雪花算法（当时从组成，为什么可以作为分布式id角度回答）</h3><h3 id="使用kafka实现UGC消息异步推送，起到削峰、解耦的作用，讲一下对削峰、解耦的理解。"><a href="#使用kafka实现UGC消息异步推送，起到削峰、解耦的作用，讲一下对削峰、解耦的理解。" class="headerlink" title="使用kafka实现UGC消息异步推送，起到削峰、解耦的作用，讲一下对削峰、解耦的理解。"></a>使用kafka实现UGC消息异步推送，起到削峰、解耦的作用，讲一下对削峰、解耦的理解。</h3><h3 id="Redis在哪一部分用的比较多？"><a href="#Redis在哪一部分用的比较多？" class="headerlink" title="Redis在哪一部分用的比较多？"></a>Redis在哪一部分用的比较多？</h3><h3 id="讲一下http的三次握手、四次挥手？"><a href="#讲一下http的三次握手、四次挥手？" class="headerlink" title="讲一下http的三次握手、四次挥手？"></a>讲一下http的三次握手、四次挥手？</h3><h3 id="为什么要进行四次挥手？"><a href="#为什么要进行四次挥手？" class="headerlink" title="为什么要进行四次挥手？"></a>为什么要进行四次挥手？</h3><h3 id="介绍一下udp和tcp之间的区别"><a href="#介绍一下udp和tcp之间的区别" class="headerlink" title="介绍一下udp和tcp之间的区别"></a>介绍一下udp和tcp之间的区别</h3><h3 id="什么时候用UDP？什么时候用TCP？"><a href="#什么时候用UDP？什么时候用TCP？" class="headerlink" title="什么时候用UDP？什么时候用TCP？"></a>什么时候用UDP？什么时候用TCP？</h3><h3 id="介绍一下对HTTP的理解"><a href="#介绍一下对HTTP的理解" class="headerlink" title="介绍一下对HTTP的理解"></a>介绍一下对HTTP的理解</h3><h3 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h3><h3 id="介绍一下token"><a href="#介绍一下token" class="headerlink" title="介绍一下token"></a>介绍一下token</h3><h3 id="讲一下MySQL的索引，什么时候用到了索引，以及什么时候遇到过索引失效的？"><a href="#讲一下MySQL的索引，什么时候用到了索引，以及什么时候遇到过索引失效的？" class="headerlink" title="讲一下MySQL的索引，什么时候用到了索引，以及什么时候遇到过索引失效的？"></a>讲一下MySQL的索引，什么时候用到了索引，以及什么时候遇到过索引失效的？</h3><h3 id="介绍一下Redis的数据类型和持久化"><a href="#介绍一下Redis的数据类型和持久化" class="headerlink" title="介绍一下Redis的数据类型和持久化"></a>介绍一下Redis的数据类型和持久化</h3><h3 id="如何通过Redis实现分布式锁？"><a href="#如何通过Redis实现分布式锁？" class="headerlink" title="如何通过Redis实现分布式锁？"></a>如何通过Redis实现分布式锁？</h3><h3 id="Redis的淘汰策略有哪些？"><a href="#Redis的淘汰策略有哪些？" class="headerlink" title="Redis的淘汰策略有哪些？"></a>Redis的淘汰策略有哪些？</h3><h3 id="介绍一下对多线程的理解"><a href="#介绍一下对多线程的理解" class="headerlink" title="介绍一下对多线程的理解"></a>介绍一下对多线程的理解</h3><h3 id="什么是线程池、为什么要使用线程池？"><a href="#什么是线程池、为什么要使用线程池？" class="headerlink" title="什么是线程池、为什么要使用线程池？"></a>什么是线程池、为什么要使用线程池？</h3><h3 id="Java的异常有哪些？如何捕获异常？"><a href="#Java的异常有哪些？如何捕获异常？" class="headerlink" title="Java的异常有哪些？如何捕获异常？"></a>Java的异常有哪些？如何捕获异常？</h3><h3 id="对文件的上传、下载分别有哪些测试功能点？"><a href="#对文件的上传、下载分别有哪些测试功能点？" class="headerlink" title="对文件的上传、下载分别有哪些测试功能点？"></a>对文件的上传、下载分别有哪些测试功能点？</h3><h3 id="算法题：把两个无序的数组合并成一个有序的数组"><a href="#算法题：把两个无序的数组合并成一个有序的数组" class="headerlink" title="算法题：把两个无序的数组合并成一个有序的数组"></a>算法题：把两个无序的数组合并成一个有序的数组</h3><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><h3 id="为什么要选择面试测试开发这个岗位？"><a href="#为什么要选择面试测试开发这个岗位？" class="headerlink" title="为什么要选择面试测试开发这个岗位？"></a>为什么要选择面试测试开发这个岗位？</h3><h3 id="你觉得测开需要学习些什么方面的东西？"><a href="#你觉得测开需要学习些什么方面的东西？" class="headerlink" title="你觉得测开需要学习些什么方面的东西？"></a>你觉得测开需要学习些什么方面的东西？</h3><h3 id="netty和直接裸写socket有什么区别？"><a href="#netty和直接裸写socket有什么区别？" class="headerlink" title="netty和直接裸写socket有什么区别？"></a>netty和直接裸写socket有什么区别？</h3><h3 id="什么是NIO？"><a href="#什么是NIO？" class="headerlink" title="什么是NIO？"></a>什么是NIO？</h3><h3 id="为什么IO多路复用比多线程更高效？"><a href="#为什么IO多路复用比多线程更高效？" class="headerlink" title="为什么IO多路复用比多线程更高效？"></a>为什么IO多路复用比多线程更高效？</h3><h3 id="Redis是单线程还是多线程的？为什么是单线程还能这么高效？"><a href="#Redis是单线程还是多线程的？为什么是单线程还能这么高效？" class="headerlink" title="Redis是单线程还是多线程的？为什么是单线程还能这么高效？"></a>Redis是单线程还是多线程的？为什么是单线程还能这么高效？</h3><h3 id="在多路复用的场景下，做一个哈希计算可行吗？会不会有什么问题？"><a href="#在多路复用的场景下，做一个哈希计算可行吗？会不会有什么问题？" class="headerlink" title="在多路复用的场景下，做一个哈希计算可行吗？会不会有什么问题？"></a>在多路复用的场景下，做一个哈希计算可行吗？会不会有什么问题？</h3><h3 id="使用netty实现IM实时通讯为什么不只使用websocket协议，而还要加上rpc协议呢？（应该是json-rpc协议。。。当时简历写错了）"><a href="#使用netty实现IM实时通讯为什么不只使用websocket协议，而还要加上rpc协议呢？（应该是json-rpc协议。。。当时简历写错了）" class="headerlink" title="使用netty实现IM实时通讯为什么不只使用websocket协议，而还要加上rpc协议呢？（应该是json-rpc协议。。。当时简历写错了）"></a>使用netty实现IM实时通讯为什么不只使用websocket协议，而还要加上rpc协议呢？（应该是json-rpc协议。。。当时简历写错了）</h3><h3 id="netty的广播怎么实现的？"><a href="#netty的广播怎么实现的？" class="headerlink" title="netty的广播怎么实现的？"></a>netty的广播怎么实现的？</h3><h3 id="如果在通信过程中，客户端突然断开或者服务端进行升级，应该怎么解决这两个问题？"><a href="#如果在通信过程中，客户端突然断开或者服务端进行升级，应该怎么解决这两个问题？" class="headerlink" title="如果在通信过程中，客户端突然断开或者服务端进行升级，应该怎么解决这两个问题？"></a>如果在通信过程中，客户端突然断开或者服务端进行升级，应该怎么解决这两个问题？</h3><h3 id="如果出现了断开重连的情况，用户重新登录会继续看到以前的消息吗？怎么实现的消息持久化？"><a href="#如果出现了断开重连的情况，用户重新登录会继续看到以前的消息吗？怎么实现的消息持久化？" class="headerlink" title="如果出现了断开重连的情况，用户重新登录会继续看到以前的消息吗？怎么实现的消息持久化？"></a>如果出现了断开重连的情况，用户重新登录会继续看到以前的消息吗？怎么实现的消息持久化？</h3><h3 id="介绍一下jwt和session的区别？（说一些token的优势）介绍一下CSRF攻击的应用场景，如何避免CSRF的攻击？"><a href="#介绍一下jwt和session的区别？（说一些token的优势）介绍一下CSRF攻击的应用场景，如何避免CSRF的攻击？" class="headerlink" title="介绍一下jwt和session的区别？（说一些token的优势）介绍一下CSRF攻击的应用场景，如何避免CSRF的攻击？"></a>介绍一下jwt和session的区别？（说一些token的优势）介绍一下CSRF攻击的应用场景，如何避免CSRF的攻击？</h3><h3 id="说几个Maven的常用命令"><a href="#说几个Maven的常用命令" class="headerlink" title="说几个Maven的常用命令"></a>说几个Maven的常用命令</h3><h3 id="常用的map有哪些？TreeMap和HashMap的区别（实现的接口，时间复杂度，应用场景）"><a href="#常用的map有哪些？TreeMap和HashMap的区别（实现的接口，时间复杂度，应用场景）" class="headerlink" title="常用的map有哪些？TreeMap和HashMap的区别（实现的接口，时间复杂度，应用场景）"></a>常用的map有哪些？TreeMap和HashMap的区别（实现的接口，时间复杂度，应用场景）</h3><h3 id="怎么实现多线程之间的同步操作？-主线程开启10个任务，-等这10个任务并发结束之后，再执行其他的任务应该怎么实现？"><a href="#怎么实现多线程之间的同步操作？-主线程开启10个任务，-等这10个任务并发结束之后，再执行其他的任务应该怎么实现？" class="headerlink" title="怎么实现多线程之间的同步操作？ 主线程开启10个任务， 等这10个任务并发结束之后，再执行其他的任务应该怎么实现？"></a>怎么实现多线程之间的同步操作？ 主线程开启10个任务， 等这10个任务并发结束之后，再执行其他的任务应该怎么实现？</h3><h3 id="Java的新特性（介绍的Java8的新特性）"><a href="#Java的新特性（介绍的Java8的新特性）" class="headerlink" title="Java的新特性（介绍的Java8的新特性）"></a>Java的新特性（介绍的Java8的新特性）</h3><h3 id="编码：实现a，b两个线程顺序交替执行"><a href="#编码：实现a，b两个线程顺序交替执行" class="headerlink" title="编码：实现a，b两个线程顺序交替执行"></a>编码：实现a，b两个线程顺序交替执行</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h2&gt;&lt;h3 id=&quot;微布校园的分工如何？&quot;&gt;&lt;a href=&quot;#微布校园的分工如何？&quot; class=&quot;headerlink&quot; title=&quot;微布校园的</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经-万物心选php开发实习</title>
    <link href="http://xiaobazeo.github.io/2023/07/25/%E9%9D%A2%E7%BB%8F-%E4%B8%87%E7%89%A9%E5%BF%83%E9%80%89php%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0/"/>
    <id>http://xiaobazeo.github.io/2023/07/25/%E9%9D%A2%E7%BB%8F-%E4%B8%87%E7%89%A9%E5%BF%83%E9%80%89php%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-07-25T08:13:52.000Z</published>
    <updated>2023-09-20T07:33:15.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实习项目的监听字段是基于什么实现的？"><a href="#实习项目的监听字段是基于什么实现的？" class="headerlink" title="实习项目的监听字段是基于什么实现的？"></a>实习项目的监听字段是基于什么实现的？</h2><p>前端进行某个字段变更之后，后端提供接口，将修改后的数据打入消息队列，服务端作为消费者进行监听判断某个字段是否等于某个值然后进行对应的业务逻辑操作。</p><h2 id="通过redis作为缓存层，实现分布式锁，保证消息不会被多次消费怎么实现的？（具体的数据流程）"><a href="#通过redis作为缓存层，实现分布式锁，保证消息不会被多次消费怎么实现的？（具体的数据流程）" class="headerlink" title="通过redis作为缓存层，实现分布式锁，保证消息不会被多次消费怎么实现的？（具体的数据流程）"></a>通过redis作为缓存层，实现分布式锁，保证消息不会被多次消费怎么实现的？（具体的数据流程）</h2><p>通过业务id来保证，业务id作为锁的key，当消费信息的时候，把工单id作为key去申请锁，如果成功拿到了锁，说明此时不存在竞争关系，如果当前进程被阻塞了，说明有进程对该数据进行了消费。</p><p>不过后面发现如果有两个并发的线程的时候，被阻塞的业务后面拿到了还是可能会造成重复消费，于是又加了一层缓存，缓存已经消费了的业务id，用来表示是否被消费过，也就是保证业务的幂等性。</p><h2 id="当时为什么考虑到设置一个重试机制降低消费的失败率？"><a href="#当时为什么考虑到设置一个重试机制降低消费的失败率？" class="headerlink" title="当时为什么考虑到设置一个重试机制降低消费的失败率？"></a>当时为什么考虑到设置一个重试机制降低消费的失败率？</h2><p>当初实现合同是临时合同的时候，要删除销售合同的主从表，因为当时是两个表，涉及到了一个同步操作，即先删除主表之后再删除从表的操作，要保证事务的一致性和原子性，可能两个删除操作会有一个或者两个操作均失败的情况，就设计了这个重试机制，如果其中一个操作失败就进行事务回滚，然后将两个同步操作打入重试的队列中进行一次重试。</p><h2 id="有没有其他的措施避免消费失败和重复消费？（除开分布式锁的方式）"><a href="#有没有其他的措施避免消费失败和重复消费？（除开分布式锁的方式）" class="headerlink" title="有没有其他的措施避免消费失败和重复消费？（除开分布式锁的方式）"></a>有没有其他的措施避免消费失败和重复消费？（除开分布式锁的方式）</h2><p><strong>避免消费失败的措施：</strong></p><ol><li>失败重试机制</li><li>死信队列</li><li>消息超时机制：避免因为一个消息阻塞导致后续的所有消息超时</li><li>负载均衡：如果是集群分布式服务，可以通过负载均衡算法分配给多个消费者。</li><li>消息确认机制：当消费者消费成功之后，发送确认信号给消息队列，表示消息处理成功，如果消费者在一定时间内没有返回确认信号，消息队列就重新分发消息给其他的消费者进行消费。</li></ol><p><strong>避免重复消费的措施：</strong></p><ol><li>实现幂等性：即相同的多个操作所产生的影响与仅执行一次的操作所产生的影响相同。确保相同的消息被多次发送之后，只会被处理一次。</li><li>消息确认机制：消息队列消费者消费之后会给生产者发送一个确认信号告诉已经消费信息成功，如果在一定时间内没有发送确认消息，消息队列就会认为此消息未被成功消费，会将该消息重新发送给消费者。</li><li>消费者限流：在高并发的场景中，为了消费者过度消费，就会在一定时间内只允许消费者消费一定数量的消息，以避免被过度消费而导致的重复消费。</li></ol><h2 id="如何解决数据库offset超过10000时失效的问题？"><a href="#如何解决数据库offset超过10000时失效的问题？" class="headerlink" title="如何解决数据库offset超过10000时失效的问题？"></a>如何解决数据库offset超过10000时失效的问题？</h2><p>通过分页查询的方式，偏移量超过一万的情况下，我们可以通过limit的分页查询机制，一直查到第10001条数据的主键id，然后从此id开始进一步根据条件查询需要获取的数据。</p><h2 id="为什么offset超过10000会查询不到数据呢？"><a href="#为什么offset超过10000会查询不到数据呢？" class="headerlink" title="为什么offset超过10000会查询不到数据呢？"></a>为什么offset超过10000会查询不到数据呢？</h2><p>OFFSET工作原理是通过全表扫描，先查询所有匹配的记录，然后再跳过指定数量的记录，如果偏移量特别大，数据库可能会需要一次性加载大量数据到内存中，会导致内存不足的问题。</p><h2 id="实习时候的成长经历"><a href="#实习时候的成长经历" class="headerlink" title="实习时候的成长经历"></a>实习时候的成长经历</h2><p>1、有一次出现过一次消息队列重复消费的情况，当时情况是两个不同的测试环境，做相同业务消费时消费了两次，然后查代码一直也没有查到原因，就去看配置环境，原来是当时运维那边部署消息队列，两个环境都部署到了一个队列上面，没有做环境隔离。。。</p><p>2、在开发流程中先根据需求，写出开发思路，</p><h2 id="JWT代替Cookie-Session机制的业务流程，以及如何管理用户状态？token的存在什么位置？服务端是如何校验token是否有效的？"><a href="#JWT代替Cookie-Session机制的业务流程，以及如何管理用户状态？token的存在什么位置？服务端是如何校验token是否有效的？" class="headerlink" title="JWT代替Cookie-Session机制的业务流程，以及如何管理用户状态？token的存在什么位置？服务端是如何校验token是否有效的？"></a>JWT代替Cookie-Session机制的业务流程，以及如何管理用户状态？token的存在什么位置？服务端是如何校验token是否有效的？</h2><p><strong>业务及校验流程：</strong></p><p>用户通过学号+教务密码向Java后端发起请求，然后Java后端调用Python的服务进行校验账号密码是否正确，如果正确就会向前端返回一个token，客户端将Token保存在本地缓存之中，方便以后在一些业务操作的时候，都会从本地缓存中获取Token并将其放在Http请求的Header中发送请求，服务端获取到请求之后从Http的header里面获取token，并通过服务端保存的密匙进行重新生成新的signature和客户端发过来的token的signature进行比较确认token是否有效，再从payload部分获取相关用户信息进行进一步身份校验。</p><p>每次服务端在校验token有效的时候会根据payload的签发token时间+超时时间，当离过期时间只有1天的时候，就会重新签发一个Token给前端。</p><p><strong>Token存放位置：</strong></p><p>HTTP的Header部分。</p><h2 id="Java为什么需要垃圾回收机制呢？"><a href="#Java为什么需要垃圾回收机制呢？" class="headerlink" title="Java为什么需要垃圾回收机制呢？"></a>Java为什么需要垃圾回收机制呢？</h2><p>主要是为了管理内存，自动释放不再使用的对象，以避免内存泄漏和提高程序性能。</p><h2 id="什么情况下会出现资源的浪费（内存泄漏）？"><a href="#什么情况下会出现资源的浪费（内存泄漏）？" class="headerlink" title="什么情况下会出现资源的浪费（内存泄漏）？"></a>什么情况下会出现资源的浪费（内存泄漏）？</h2><p>1、长期存活的对象占用过多内存，就是长生命周期对象持有短生命周期的引用导致部分短生命周期的对象一直没有被释放，进而积累过多的情况下出现内存泄漏的问题。</p><p>2、各种连接：比如数据库连接、网络连接，对于这些连接操作都需要在不使用的时候进行关闭操作，垃圾回收期才会进行回收。</p><p>3、变量作用域不合理：比如要对一个msg进行保存操作，但是msg定义成一个成员变量，然后通过receiveMsg()方法进行相关保存业务逻辑操作，但是因为msg是成员变量，生命周期和类的生命周期一样，所以导致存储操作完成之后，msg还没有被回收释放，可能就会导致内存泄漏。</p><h2 id="创建了一个String类型的数据什么时候会被垃圾回收机制回收？"><a href="#创建了一个String类型的数据什么时候会被垃圾回收机制回收？" class="headerlink" title="创建了一个String类型的数据什么时候会被垃圾回收机制回收？"></a>创建了一个String类型的数据什么时候会被垃圾回收机制回收？</h2><p>1、对象不再引用。</p><p>2、对象引用被显式设置为null。</p><p>3、对象的引用超出作用域：在一个方法内部创建的，那么在这个方法执行完之后就会被收回。</p><p>3、垃圾回收机制触发：Java虚拟机判断系统内存不足就会触发此机制，尝试回收不再被使用的对象。</p><h2 id="了解哪些垃圾回收算法并介绍一下"><a href="#了解哪些垃圾回收算法并介绍一下" class="headerlink" title="了解哪些垃圾回收算法并介绍一下"></a>了解哪些垃圾回收算法并介绍一下</h2><p><strong>标记-清除算法：</strong></p><p>首先标记处所有不需要回收的对象，在标记完成后统一回收掉所有没有被标记的对象。</p><p>导致的问题：</p><p>1、标记清除的过程效率都不高</p><p>2、标记清除后会产生大量不连续的内存碎片。</p><p><strong>复制算法：</strong></p><p>将内存空间分为两半，每次使用其中的一块，当这块使用完之后，将这块还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。</p><p>导致的问题：</p><p>1、可用内存变小。</p><p>2、不适合老年代，如果存活对象数量大，复制性能会比较差。</p><p><strong>标记-整理算法：</strong></p><p>标记不需要回收的对象，然后将没有标记的对象统一向一端移动，然后直接清理掉端边界以外的内存。</p><p>导致问题：</p><p>只适合老年代回收频率较低的场景</p><p><strong>分代收集算法：</strong></p><p>根据不同对象的生命周期将内存分为几块。一般将Java堆分为新生代和老年代，可以根据各个年代的特点选择合适的垃圾收集算法。</p><p>比如：新生代中，每次都会有大量对象死去，可以选择<strong>复制算法</strong>，只需要付出少量对象的复制成本就可以完成垃圾收集。而对于老年代生命周期较长，存活率较高，可以选择<strong>标记-清除算法</strong>或者<strong>标记-整理算法</strong>实现。</p><h2 id="垃圾回收机制为什么要分新生代和老年代呢？"><a href="#垃圾回收机制为什么要分新生代和老年代呢？" class="headerlink" title="垃圾回收机制为什么要分新生代和老年代呢？"></a>垃圾回收机制为什么要分新生代和老年代呢？</h2><p>根据不同对象的生命周期将内存分为几块。一般将Java堆分为新生代和老年代，可以根据各个年代的特点选择合适的垃圾收集算法。</p><h2 id="为什么新生代和老年代不放在一起进行回收呢？"><a href="#为什么新生代和老年代不放在一起进行回收呢？" class="headerlink" title="为什么新生代和老年代不放在一起进行回收呢？"></a>为什么新生代和老年代不放在一起进行回收呢？</h2><p>1、不同对象生命周期：可以根据不同的生命周期对象采用不同的回收策略</p><p>2、不同回收算法：一般新生代会采用复制算法清除，因为可以标记较少的对象复制到另一块内存上面去，然后一次性清理整个区域，效率较高，对于老年代生命周期长且存活率高，就可以采用标记-整理或者标记-删除的办法，将不需要回收的对象进行标记，然后直接删除没有标记的即可。</p><p>3、避免频繁回收老年代：混在一起会导致老年代频繁的回收，降低系统的性能。</p><h2 id="数组和链表的优缺点（Array和ArrayList），谁的访问效率会更高？"><a href="#数组和链表的优缺点（Array和ArrayList），谁的访问效率会更高？" class="headerlink" title="数组和链表的优缺点（Array和ArrayList），谁的访问效率会更高？"></a>数组和链表的优缺点（Array和ArrayList），谁的访问效率会更高？</h2><ul><li>数组访问效率比链表高，因为链表通常是动态扩容的，每次的动态调整都会带来一定的开销以及维护指针等，所以访问效率较低。</li><li>链表能灵活进行动态扩容或缩容，但是数组一旦确定大小就不能进行扩容和缩容操作了。</li><li>链表有丰富的api可以直接动态进行增删查改，而数组是一个固定长度的数组，只能按下标访问其中的元素，不具备动态增删的能力。</li><li>链表只能存储对象（对于基本数据类型可以采用包装类进行存储），但是数组既可以存储对象也可以存储基本数据类型。</li><li>链表可以通过泛型保证类型安全，但是数组不可以。</li></ul><h2 id="有没有一个数据结构可以访问元素时间是O-1-，又可以灵活的调整他的容量大小？"><a href="#有没有一个数据结构可以访问元素时间是O-1-，又可以灵活的调整他的容量大小？" class="headerlink" title="有没有一个数据结构可以访问元素时间是O(1)，又可以灵活的调整他的容量大小？"></a>有没有一个数据结构可以访问元素时间是O(1)，又可以灵活的调整他的容量大小？</h2><p>哈希表可以将key映射到存储位置来实现快速访问，使用哈希函数将键转换成索引，然后将值存在对应索引的位置，在理想情况下，能够在O（1）情况下根据键找到对应的值。哈希表具有灵活的扩容机制，当哈希表中元素过多的时候就会自动扩容，重新分配更大的空间。</p><h2 id="HashMap是如何解决哈希冲突的呢？为什么要选择红黑树来作为解决哈希冲突的数据结构？（即：选择红黑树的优势是什么？）"><a href="#HashMap是如何解决哈希冲突的呢？为什么要选择红黑树来作为解决哈希冲突的数据结构？（即：选择红黑树的优势是什么？）" class="headerlink" title="HashMap是如何解决哈希冲突的呢？为什么要选择红黑树来作为解决哈希冲突的数据结构？（即：选择红黑树的优势是什么？）"></a>HashMap是如何解决哈希冲突的呢？为什么要选择红黑树来作为解决哈希冲突的数据结构？（即：选择红黑树的优势是什么？）</h2><p>hashmap是基于数组+链表/红黑树的数据结构来具体实现的，首先hashmap产生哈希冲突的时候会判断链表的长度是否大于8，如果大于的话就会转换成红黑树（此时进入红黑树转换的函数的时候，会判断数组的长度是否大于64，如果数组长度小于64，就不会转换成红黑树，而是选择扩容的机制解决哈希冲突）</p><p>选择红黑树的原因：</p><p>1、如果是<strong>二叉查询树</strong>比较极端的情况下，当子节点都比父节点大或者小的时候，二叉查找树又会退化成链表，此时时间复杂度又是O(n)。</p><p>2、如果是<strong>平衡二叉树（AVL）</strong>，因为它每个节点的左子树和右子树的高度差至多等于1，如果大于1了就会通过左旋或者右旋的方式，使其复杂度一直维持在O(logN)，但是因为这个左旋和右旋的原因，导致插入数据的时候需要消耗大量的时间。</p><h2 id="场景题：现在有路由器a-b-c-d，有一个数据包按照正常情况下应该是从a转发到b，从b转发到c，从c转发到d，但是由于路由器c配置出错了，导致从a转发到b，再从b转发到c，最后又从c转发回了a，形成了一个循环路由，这时候这个数据包在IP层会被怎么处理掉呢？"><a href="#场景题：现在有路由器a-b-c-d，有一个数据包按照正常情况下应该是从a转发到b，从b转发到c，从c转发到d，但是由于路由器c配置出错了，导致从a转发到b，再从b转发到c，最后又从c转发回了a，形成了一个循环路由，这时候这个数据包在IP层会被怎么处理掉呢？" class="headerlink" title="场景题：现在有路由器a,b,c,d，有一个数据包按照正常情况下应该是从a转发到b，从b转发到c，从c转发到d，但是由于路由器c配置出错了，导致从a转发到b，再从b转发到c，最后又从c转发回了a，形成了一个循环路由，这时候这个数据包在IP层会被怎么处理掉呢？"></a>场景题：现在有路由器a,b,c,d，有一个数据包按照正常情况下应该是从a转发到b，从b转发到c，从c转发到d，但是由于路由器c配置出错了，导致从a转发到b，再从b转发到c，最后又从c转发回了a，形成了一个循环路由，这时候这个数据包在IP层会被怎么处理掉呢？</h2><p>在IP层遇到循环路由的情况下，数据包会被丢弃。IP协议是一种无连接的、不可靠的协议，它不会主动检查循环路由或处理数据包的循环传递。</p><p>为了防止数据包在网络中无限循环，网络管理员通常会配置路由器使用一些防循环机制，比如距离矢量路由协议中的Split Horizon技术，或链路状态路由协议中的Reverse Path Forwarding（RPF）检查。这些机制有助于检测和避免数据包在网络中形成循环路径。</p><p>但是，即使配置了防循环机制，由于网络的复杂性和问题可能的多样性，有时候循环路由问题仍然可能发生。在这种情况下，IP层不会继续无限传递数据包，而是丢弃它，从而避免对网络产生更严重的影响。丢弃数据包是为了确保网络中的数据传输是可靠和有效的，即使牺牲了某些数据包。</p><h2 id="Linux看文件大小怎么做？stat命令显示的文件大小是以块为单位，怎么转换成人类可识别的大小？"><a href="#Linux看文件大小怎么做？stat命令显示的文件大小是以块为单位，怎么转换成人类可识别的大小？" class="headerlink" title="Linux看文件大小怎么做？stat命令显示的文件大小是以块为单位，怎么转换成人类可识别的大小？"></a>Linux看文件大小怎么做？stat命令显示的文件大小是以块为单位，怎么转换成人类可识别的大小？</h2><p>stat的基本单位是块，也就是byte。转换成可识别的大小的话，通过1 kb = 1024byte实现。</p><p>可以通过ls -lh</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实习项目的监听字段是基于什么实现的？&quot;&gt;&lt;a href=&quot;#实习项目的监听字段是基于什么实现的？&quot; class=&quot;headerlink&quot; title=&quot;实习项目的监听字段是基于什么实现的？&quot;&gt;&lt;/a&gt;实习项目的监听字段是基于什么实现的？&lt;/h2&gt;&lt;p&gt;前端进行某个</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经-快手测开 2023 - 7 - 11</title>
    <link href="http://xiaobazeo.github.io/2023/07/23/%E9%9D%A2%E7%BB%8F-%E5%BF%AB%E6%89%8B%E6%B5%8B%E5%BC%80%E5%AE%9E%E4%B9%A0/"/>
    <id>http://xiaobazeo.github.io/2023/07/23/%E9%9D%A2%E7%BB%8F-%E5%BF%AB%E6%89%8B%E6%B5%8B%E5%BC%80%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-07-23T06:50:54.000Z</published>
    <updated>2023-08-20T02:56:44.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单介绍一下二手市场整体的架构，数据流的实现？"><a href="#简单介绍一下二手市场整体的架构，数据流的实现？" class="headerlink" title="简单介绍一下二手市场整体的架构，数据流的实现？"></a>简单介绍一下二手市场整体的架构，数据流的实现？</h2><p><strong>整体架构：</strong></p><ol><li>持久层和缓存的选型<ol><li>MySQL作为持久层：<ol><li>支持复杂条件数据查询：在二手市场中，用户会根据自身需求筛选不同的条件进行各种复杂的查询，例如按照不同条件筛选商品等，MySQL提供丰富的查询语言和索引支持，能够高效查询相关数据。</li><li>结构化数据存储：二手市场涉及大量的结构化数据，例如：用户信息，商品信息等。而MySQL是关系型数据库，适合存储和管理结构化数据，提供事务支持，保证数据的一致性和完整性。</li></ol></li><li>Redis作为缓存：<ol><li>二手市场是多读少写的场景，用户会频繁的浏览商品，但是对商品的修改变更有限，所以可以将物品信息添加至Redis中有效减轻MySQL的读取压力，提高系统的响应和性能。</li></ol></li></ol></li><li>服务的拆分方式</li></ol><p>暂时因为是单体架构，没有钱去购买太多的服务器，所以服务暂时没有进行具体的划分，如果要进行划分的话我觉得可以划分成以下几种服务：</p><ol><li><p>用户服务：主要是对用户的身份信息进行认证和鉴权。</p></li><li><p>UGC消息通知：可以处理二手市场发布、编辑商品信息后，通过邮件、消息推送的方式告知用户。</p></li><li><p>商品信息服务：负责二手商品信息的发布、编辑、删除、搜索等功能。</p></li><li><p>缓存服务：应对二手市场这种读大于写的场景，可以将最新的50条商品信息放入系统缓存中，优化用户查看商品的体验。</p></li><li><p>支付服务：支付服务负责处理用户的支付请求，与第三方支付平台进行交互，并确保支付的安全性和可靠性。</p></li><li><p>文件服务：用于处理用户上传的图片、视频。</p></li><li><p>服务容灾和负载均衡方式</p><ol><li>服务容灾：<ol><li>定期对系统的数据进行备份</li><li>定期检查维护服务器的实例，修复代码BUG等</li></ol></li><li>负载均衡：<ol><li>CDN服务：将静态资源（图片、视频等）放置在内容分发网络中，加快资源加载速度，减少服务器负载</li><li>缓存数据，使用缓存减轻服务器负担，提高响应速度</li><li>反向代理：通过Nginx反向代理服务实现负载均衡，等后面有多台服务器之后将请求分发给不同的服务器，提高服务可扩展性。</li></ol></li></ol></li></ol><p><strong>数据流实现：</strong></p><ol><li>用户上传商品：<ol><li>用户在应用中填写商品信息，并上传相关照片</li><li>上传的用户信息和照片URL被发送到服务器中进行处理和存储</li><li>服务器对传过来的数据进行数据库存储，并生成一个唯一ID</li></ol></li><li>商品展示和搜索：<ol><li>其他用户访问二手市场时，前端向后端请求商品数据</li><li>后端从数据库中获取数据列表，并返回给前端</li><li>用户可以根据自身的需求条件查询特定的商品，前端将搜索条件发送给后端，后端根据条件查询数据库并返回匹配的商品信息。</li></ol></li><li>商品详情获取：<ol><li>当用户点击某个商品的详情信息之后，前端发送请求，传递对应的商品ID给后端</li><li>后端根据商品ID在数据库中搜索并返回具体商品信息给前端展示</li></ol></li></ol><h2 id="如果检索某个具体商品是如何实现检索的？"><a href="#如果检索某个具体商品是如何实现检索的？" class="headerlink" title="如果检索某个具体商品是如何实现检索的？"></a>如果检索某个具体商品是如何实现检索的？</h2><h2 id="查询的时候如何避免慢查询？"><a href="#查询的时候如何避免慢查询？" class="headerlink" title="查询的时候如何避免慢查询？"></a>查询的时候如何避免慢查询？</h2><ul><li>索引优化，将经常用到的字段创建索引（除去经常更新的字段、重复度很高的字段、数据量较少的情况），比如单列索引和联合索引，从而避免全表扫描。</li><li>分页查询：对于返回大量的数据查询，使用分页查询的方式，限制返回的数据量，避免一次返回大量的数据导致查询速率很慢。</li><li>缓存查询：对于一些比较查询比较频繁的数据可以使用缓存来避免每次都进行数据库查询。</li><li>合理设计数据库的表结构：比如说说评论查询，二级评论可以通过添加一个masterId字段(对应的说说id)来快速定位到此二级评论是归属于哪条说说之下。</li></ul><h2 id="如何正确的创建索引？（即：什么时候创建索引？）"><a href="#如何正确的创建索引？（即：什么时候创建索引？）" class="headerlink" title="如何正确的创建索引？（即：什么时候创建索引？）"></a>如何正确的创建索引？（即：什么时候创建索引？）</h2><ul><li>字段具有唯一性限制，即重复度很低，且不是经常修改的字段</li><li>经常用于where子句查询</li><li>经常用于group by 或者 order by查询</li><li>表的数据量比较多的情况</li></ul><h2 id="二手市场进行物品查询，做测试的话会进行设计使用哪些测试用例？"><a href="#二手市场进行物品查询，做测试的话会进行设计使用哪些测试用例？" class="headerlink" title="二手市场进行物品查询，做测试的话会进行设计使用哪些测试用例？"></a>二手市场进行物品查询，做测试的话会进行设计使用哪些测试用例？</h2><ol><li>正确、错误、空物品查询</li><li>物品大小写查询</li><li>高并发查询</li><li>过滤项查询</li><li>物品状态查询</li><li>安全性测试：比如SQL注入</li><li>边界值测试：比如输入极限情况下，很长的字符串验证系统是否能正确处理。</li></ol><h2 id="后端如何进行统计服务的性能？是否对请求进行一些限流的操作？如何进行限流的操作？"><a href="#后端如何进行统计服务的性能？是否对请求进行一些限流的操作？如何进行限流的操作？" class="headerlink" title="后端如何进行统计服务的性能？是否对请求进行一些限流的操作？如何进行限流的操作？"></a>后端如何进行统计服务的性能？是否对请求进行一些限流的操作？如何进行限流的操作？</h2><ol><li>统计性能的方式：<ol><li>日志记录</li><li>性能监控工具的使用：比如New Relic、Prometheus等</li><li>负载测试，模拟大量并发请求，观察系统的响应情况和性能指标。</li></ol></li><li>有，限流操作如下：<ol><li>固定窗口计时器：设置一个固定时间窗口，例如</li></ol></li></ol><h2 id="HashMap、HashSet、HashTable的区别？"><a href="#HashMap、HashSet、HashTable的区别？" class="headerlink" title="HashMap、HashSet、HashTable的区别？"></a>HashMap、HashSet、HashTable的区别？</h2><p><strong>HashMap和HashTable区别：</strong></p><ul><li>线程是否安全：HashMap是非线程安全，HashTable是线程安全（通过synchronized修饰实现）。</li><li>效率：由于HashMap线程不安全，HashMap比HashTable效率高，但是HashTable几乎被淘汰，平时一般不会用HashTable。</li><li>键值对存值问题：HashMap是可存null键和null值，HashTable不允许有null键和null值，否则会抛出异常NPE。</li><li>初始容量大小和每次扩充容量大小不同：HashTable初始化容量是11，每次扩容就是2n+1，HashMap初始化容量是16，每次扩容就是原来的2n倍。</li><li>底层数据结构：HashMap是<strong>数组+<strong><strong>链表</strong></strong>/红黑树</strong>实现，在解决哈希冲突时，当链表长度大于阈值（默认为8），将链表转化成红黑树（将链表转化成红黑树之前，如果数组长度小于64就会进行数组扩容，而不是转换成红黑树），以减少搜索时间，而HashTable是<strong>数组+链表</strong>的形式实现。</li></ul><p><strong>HashMap和<strong><strong>HashSet</strong></strong>的区别：</strong></p><ul><li>HashMap实现Map接口，HashSet实现Set接口。</li><li>HashMap存储键值对，HashSet只存储对象。</li><li>HashMap通过put方法添加元素，HashSet通过add()向Set中添加元素。</li><li>HashMap使用Key计算hashcode，HashSet使用成员对象计算hashcode值。</li></ul><h2 id="HashMap是线程的安全的吗？介绍一下ConcurrentHashMap"><a href="#HashMap是线程的安全的吗？介绍一下ConcurrentHashMap" class="headerlink" title="HashMap是线程的安全的吗？介绍一下ConcurrentHashMap"></a>HashMap是线程的安全的吗？介绍一下ConcurrentHashMap</h2><p>线程<strong>不安全</strong>，因为多线程情况下，HashMap进行键值对存值的时候，可能会因为分配到一个桶里面造成数据覆盖的风险，比如线程1，2同时进行put操作，此时正好发生了hash冲突，线程1执行完hash冲突判断之后，时间片耗尽挂起，此时线程2进行hash冲突判断并对数据插入到链表中，后面等线程1重新获取到时间片，进行插入操作就会覆盖掉线程插入的数据。</p><p><strong>ConcuurentHashMap：</strong></p><p>Java8以上数据结构是Node数组+链表/红黑树，哈希冲突时当链表长度大于一定长度时，链表就会转换成红黑树。</p><h2 id="接口和抽象类的区别？"><a href="#接口和抽象类的区别？" class="headerlink" title="接口和抽象类的区别？"></a>接口和抽象类的区别？</h2><ul><li>接口是对类的行为进行约束，实现了某个接口就是已经拥有了具体的行为，抽象类是代码复用，强调的是类的从属关系。</li><li>接口的成员变量只能用public static final修饰且不可修改和初始化，抽象类的成员变量默认为default类型，可以在子类被重新赋值定义。</li><li>一个类可以实现多个接口但是只能继承一个父类。</li></ul><h2 id="如果某个网页打不开了，排查手段有哪些？"><a href="#如果某个网页打不开了，排查手段有哪些？" class="headerlink" title="如果某个网页打不开了，排查手段有哪些？"></a>如果某个网页打不开了，排查手段有哪些？</h2><h2 id="Linux中查看主目录下以-log结尾的文件？"><a href="#Linux中查看主目录下以-log结尾的文件？" class="headerlink" title="Linux中查看主目录下以.log结尾的文件？"></a>Linux中查看主目录下以.log结尾的文件？</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /path/to/home/directory -<span class="built_in">type</span> f -name <span class="string">&quot;*.log&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>find</code>：命令本身，用于查找文件和目录。</li><li><code>/path/to/home/directory</code>：替换为你要查找的主目录的路径。例如，如果你要在当前用户的主目录下查找，可以使用<code>~</code>代替这个路径。</li><li><code>-type f</code>：表示只查找普通文件，不包括目录等其他类型的文件。</li><li><code>-name &quot;*.log&quot;</code>：表示查找文件名以<code>.log</code>结尾的文件。<code>*.log</code>是通配符，表示匹配所有以<code>.log</code>结尾的文件名。</li></ul><h2 id="如何查询某个日志的内容？"><a href="#如何查询某个日志的内容？" class="headerlink" title="如何查询某个日志的内容？"></a>如何查询某个日志的内容？</h2><ul><li>Cat</li><li>Head</li><li>Tail</li><li>Less</li><li>More</li></ul><h2 id="比较一下less命令和more命令的区别？"><a href="#比较一下less命令和more命令的区别？" class="headerlink" title="比较一下less命令和more命令的区别？"></a>比较一下less命令和more命令的区别？</h2><ul><li>less支持前后翻页，more只支持向后翻页</li><li>less是根据要展示的内容加载到内存中，加快读取速度，more是将整个文件内容全部加载到内存中，可能会导致崩溃</li></ul><h2 id="算法题：力扣平衡字符串问题"><a href="#算法题：力扣平衡字符串问题" class="headerlink" title="算法题：力扣平衡字符串问题"></a>算法题：力扣平衡字符串问题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单介绍一下二手市场整体的架构，数据流的实现？&quot;&gt;&lt;a href=&quot;#简单介绍一下二手市场整体的架构，数据流的实现？&quot; class=&quot;headerlink&quot; title=&quot;简单介绍一下二手市场整体的架构，数据流的实现？&quot;&gt;&lt;/a&gt;简单介绍一下二手市场整体的架构，数</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>面经-滴滴golang后端实习 2023 - 07 - 04</title>
    <link href="http://xiaobazeo.github.io/2023/07/23/%E9%9D%A2%E7%BB%8F-%E6%BB%B4%E6%BB%B4Golang%E5%AE%9E%E4%B9%A0/"/>
    <id>http://xiaobazeo.github.io/2023/07/23/%E9%9D%A2%E7%BB%8F-%E6%BB%B4%E6%BB%B4Golang%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-07-23T05:16:20.000Z</published>
    <updated>2023-08-10T05:13:44.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP有哪些请求方式？"><a href="#HTTP有哪些请求方式？" class="headerlink" title="HTTP有哪些请求方式？"></a>HTTP有哪些请求方式？</h2><ul><li>PUT：将数据存储在服务器，覆盖指定URL，常用于更新资源</li><li>GET：从服务器获取数据，GET请求是幂等的，即多次请求相同的URL会返回相同的结果</li><li>POST：向服务器提交数据，通常用于向服务器发送数据，比如提交表单</li><li>DELETE：从服务器删除指定的URL资源。</li><li>HEAD：类似于GET请求，但服务器只返回头部信息，不返回实际数据。主要用于检查资源的元数据，例如确认资源是否存在或最后修改日期等。</li><li>OPTIONS：获取目标URL支持的请求方法信息。用于查询服务器支持哪些HTTP方法。</li><li>PATCH：用于对资源进行局部更新，更新指定的字段而不是像PUT一样更新整个资源。</li><li>TRACE：用于目标服务器上执行一个消息环回测试，主要用于诊断。</li><li>CONNECT：用于代理服务器请求，通常用于建立代理服务器的隧道。</li></ul><h2 id="POST和GET的使用场景及区别？"><a href="#POST和GET的使用场景及区别？" class="headerlink" title="POST和GET的使用场景及区别？"></a>POST和GET的使用场景及区别？</h2><p>POST主要用于客户端向服务端提交数据的时候使用，GET主要用于客户端向服务端获取请求的时候使用。</p><p>POST和GET实际上没有什么区别，如果硬要说有区别可见如下：</p><ul><li>GET方法产生一个数据包，POST方法产生两个数据包。<ul><li>GET方法会将header和data一并发给服务器，服务器响应200。</li><li>POST方法会先发送header给服务器，等服务器返回100之后发送data给服务器，然后服务器响应200。此方法在网络差的情况下，会稍微好一点，因为分两次发可能丢包率会小一些。（POST请求，数据包Firefox只会发一次）</li></ul></li><li>GET请求URL传递的参数会有长度限制，POST没有</li><li>GET请求传递参数放在URL中，POST放在Body部分</li><li>GET请求只接受ASCII字符，POST无限制</li><li>GET请求比POST更不安全，因为参数会外漏在URL，所以不能传递敏感信息。</li></ul><h2 id="Token在HTTP请求的时候会放在什么位置？"><a href="#Token在HTTP请求的时候会放在什么位置？" class="headerlink" title="Token在HTTP请求的时候会放在什么位置？"></a>Token在HTTP请求的时候会放在什么位置？</h2><p>一般存在header里面的Authorization字段，Java获取的此字段信息的代码一般如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 获取Authorization头的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authorizationHeader</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        System.out.println(authorizationHeader);</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GET请求的时候URL有长度限制？是HTTP本身限制了这个URL长度吗？怎么去解决URL超长的问题？"><a href="#GET请求的时候URL有长度限制？是HTTP本身限制了这个URL长度吗？怎么去解决URL超长的问题？" class="headerlink" title="GET请求的时候URL有长度限制？是HTTP本身限制了这个URL长度吗？怎么去解决URL超长的问题？"></a>GET请求的时候URL有长度限制？是HTTP本身限制了这个URL长度吗？怎么去解决URL超长的问题？</h2><ol><li>有长度限制。</li><li>不是HTTP本身限制了这个URL长度，一般是指定的浏览器或者服务器对它进行了长度的限制，超过一定的限制，服务器可能会直接返回错误或者截断URL，发生错误的请求。</li><li>解决URL超长问题方法如下：<ol><li>采取POST请求，因为POST请求对数据传输的长度没有限制</li><li>分割请求，如果传输的数据量很大，可以分割成很多小的请求分批次进行数据发送，然后服务端进行整合。</li><li>避免GET请求传输大量的数据。</li><li>压缩URL参数：通过将GET请求的URL参数进行压缩，转换成Base64来压缩参数，减少URL长度。</li></ol></li></ol><h2 id="介绍一下对Spring的理解"><a href="#介绍一下对Spring的理解" class="headerlink" title="介绍一下对Spring的理解"></a>介绍一下对Spring的理解</h2><p>是一款开源的轻量级开发框架，是多个模块的集合，比如：Spring IOC、Spring AOP等。</p><ol><li>SpringIOC（DI）</li><li>SpringAOP</li><li>可以整合其他技术开发</li></ol><h2 id="Spring、SpringMVC、SpringleBoot的区别"><a href="#Spring、SpringMVC、SpringleBoot的区别" class="headerlink" title="Spring、SpringMVC、SpringleBoot的区别"></a>Spring、SpringMVC、SpringleBoot的区别</h2><ul><li>Spring的核心模块就是Spring-Core（主要负责SpringIOC容器的依赖注入的支持），Spring其他所有功能都依赖此模块（包括SpringMVC）。</li><li>SpringMVC是Spring中得一个模块，主要赋予Spring快速构建MVC架构的Web程序能力，MVC（Model、View、Controller），其核心思想就是将业务逻辑、数据处理、视图显示分离来组织代码。</li><li>SpringBoot只是简化了配置，减少配置文件（比如xml文件、Java显示配置，开箱即用）</li></ul><h2 id="解释一下SpringIOC、SpringAOP"><a href="#解释一下SpringIOC、SpringAOP" class="headerlink" title="解释一下SpringIOC、SpringAOP"></a>解释一下SpringIOC、SpringAOP</h2><p><strong>Spring</strong> <strong>IOC<strong><strong>（</strong></strong>inversion of control<strong><strong>，</strong></strong>控制反转****）</strong></p><p>是一种设计思想，其思想就是把原本在程序创建对象的控制权，统一交给SpringIOC容器去管理，控制：创建对象实例的权利，反转：控制权交给Spring框架、IOC容器去管理。</p><p>有了SpringIOC之后，我们只需要直接从容器中获取对象即可，而对象的创建是交给SpringIOC容器去创建管理的。</p><p>实现方式：</p><p>1、从配置元数据获取DI的业务POJO（配置元数据：xml、Configuration、注解等）</p><p>2、将业务POJO形成BeanDefinition注入到Spring Container中</p><p>3、使用方通过AppllicationContext从SpringContainer中获取即可</p><p><strong>Spring AOP（Aspect Object Programming，<strong><strong>面向切面编程</strong></strong>）</strong></p><p>就是把公共逻辑抽出来，让开发者更加专注于业务逻辑开发。AOP是一种设计思想，是OOP的补充，OOP是面向类和对象的，但是AOP是面向不同切面的，一个切面可以横跨多个类和对象去操作，极大的提高了开发效率。</p><p>比如一个订单的创建，大致流程是：</p><p>1、权限校验</p><p>2、事务管理</p><p>3、创建订单</p><p>4、日志管理</p><p>使用AOP思想就可以把这四个步骤当作四个切面，让开发者专注于第三个切面，其他三个切面则使用基础的通用逻辑统一交给AOP封装管理。</p><h2 id="SpringAOP是如何实现的？"><a href="#SpringAOP是如何实现的？" class="headerlink" title="SpringAOP是如何实现的？"></a>SpringAOP是如何实现的？</h2><p>AOP实现原理：</p><p>AOP实现有两种方式，一种是Java原生的动态代理，一种是基于cglib的动态代理。默认的一般是原生的JDK的动态代理，但是这种代理方式无法代理没有接口的类，此时就会使用cglib代理这个没有接口实现的类。</p><h2 id="Sql注入攻击是什么？SQL注入是怎么产生的？"><a href="#Sql注入攻击是什么？SQL注入是怎么产生的？" class="headerlink" title="Sql注入攻击是什么？SQL注入是怎么产生的？"></a>Sql注入攻击是什么？SQL注入是怎么产生的？</h2><p><strong>SQL注入攻击****：</strong>针对使用SQL进行数据查询和操作的应用程序，基本原理是通过在用户输入的数据中插入恶意的SQL代码，从而让应用程序执行未经授权的数据库操作或者或者泄露敏感信息。</p><p>比如SQL = select * from user where username = ‘#{username}’ and password = ‘#{password}’，攻击者在用户名框或者密码输入框中输入恶意的SQL代码：<code>&#39; OR 1 = 1 --</code> 就会变成<code>select * from user where username = &#39;&#39; or 1 = 1  --&#39;and password=&#39;&#39;</code> ，此时<code>-- &#39; and password = &#39;&#39;</code> 已经被注释掉了实际上就是<code>select * from user where username = &#39;&#39; or 1 = 1;</code> 此时就会将所有用户的数据信息全部返回给前端。</p><p><strong>SQL注入的产生</strong></p><p>1、参数未校验，用户不正确的输入</p><p>2、特殊字符未转义，例如：=、–这种类型的符号</p><h2 id="什么时候需要创建索引？"><a href="#什么时候需要创建索引？" class="headerlink" title="什么时候需要创建索引？"></a>什么时候需要创建索引？</h2><ul><li>字段具有唯一性限制</li><li>经常用于where子句查询的字段</li><li>经常用于group by 和 order by查询的字段</li></ul><h2 id="为什么索引如果重复度比较高的时候会对数据库产生一定的压力？"><a href="#为什么索引如果重复度比较高的时候会对数据库产生一定的压力？" class="headerlink" title="为什么索引如果重复度比较高的时候会对数据库产生一定的压力？"></a>为什么索引如果重复度比较高的时候会对数据库产生一定的压力？</h2><ul><li>导致页分裂，占用物理空间大：每次数据更新的话，会导致索引进行重新排序，甚至造成页分裂的问题，导致索引查询效率下降，也会在一定程度上造成空间不必要的浪费。</li><li>维护成本高：索引重复度比较高也会导致索引字段大小很大，维护空间和时间成本就会变大，占用一定的冗余物理空间</li><li>查询效率低：索引重复度比较高可能会匹配到多个符合条件的索引项，进而增加查询的开销，导致查询效率下降。</li><li>内存消耗大：如果是5.7的版本，由于MySQL的索引缓存存在的原因，索引重复度高，索引大小也会变大，需要更多的内存去存储这些数据，高内存可能会导致服务器崩溃。</li></ul><h2 id="创建联合索引失效的情况"><a href="#创建联合索引失效的情况" class="headerlink" title="创建联合索引失效的情况"></a>创建联合索引失效的情况</h2><p>当where子句查询或者order by或者group by查询的时候没有遵循最左匹配原则则会导致查询时联合索引部分失效。</p><p>比如:创建索引(a,b,c)，此时<code>select * from user where a = 1 and b = 1 and c = 1;</code>此时均用到了联合索引。</p><p>若改成<code>select * from user where a = 1 and b &gt; 1 and c = 1;</code>此时用到了索引的只有a,b，因为索引查询是先对a进行排序，在a相等的情况下，对b再进行排序，最后在b相同的情况下对c进行排序，此时因为b &gt; 1无法直接定位到从哪个索引列开始顺序查询，也就是说对c再进行排序的话无法进一步提高查询速率，所以只有a，b用到了联合索引。</p><blockquote><p>一条查询语句的顺序是from -&gt; where -&gt; group by -&gt; Having -&gt; select -&gt; order by</p></blockquote><h2 id="如果有一个联合索引-a-b-c-，如果where子句查询只有a-1-and-c-1，能不能实现走-a-b-c-这个索引查询？"><a href="#如果有一个联合索引-a-b-c-，如果where子句查询只有a-1-and-c-1，能不能实现走-a-b-c-这个索引查询？" class="headerlink" title="如果有一个联合索引(a,b,c)，如果where子句查询只有a = 1 and c = 1，能不能实现走(a,b,c)这个索引查询？"></a>如果有一个联合索引(a,b,c)，如果where子句查询只有a = 1 and c = 1，能不能实现走(a,b,c)这个索引查询？</h2><p>1、如果能够修改a,b,c联合索引的顺序的话，就可以实现，比如改成<code>(a,c,b)</code> 因为联合索引遵循<strong>最左匹配原则</strong>，即先对a排序，在a相同的情况下，对c排序，在c相同的情况下再对b进行排序，最终形成索引B+树。</p><p>2、如果不可以修改联合索引的顺序，那么将无法实现走a,b,c形成的联合索引查询，此时只有a = 1能走到联合索引。</p><h2 id="目前有一个人员表，有姓名，年龄，性别字段，要求统计不同年龄下不同性别的人数？统计不同年龄下的人数？"><a href="#目前有一个人员表，有姓名，年龄，性别字段，要求统计不同年龄下不同性别的人数？统计不同年龄下的人数？" class="headerlink" title="目前有一个人员表，有姓名，年龄，性别字段，要求统计不同年龄下不同性别的人数？统计不同年龄下的人数？"></a>目前有一个人员表，有姓名，年龄，性别字段，要求统计不同年龄下不同性别的人数？统计不同年龄下的人数？</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age , sex , count<span class="comment">(*) from user group by age , sex;</span></span><br><span class="line"><span class="comment">select age , count(*)</span> <span class="keyword">from</span> user <span class="keyword">group</span> <span class="keyword">by</span> age<span class="punctuation">;</span> </span><br></pre></td></tr></table></figure><h2 id="有两个集合List如何快速找出相同的元素？"><a href="#有两个集合List如何快速找出相同的元素？" class="headerlink" title="有两个集合List如何快速找出相同的元素？"></a>有两个集合List如何快速找出相同的元素？</h2><p>思路大致如下：</p><ol><li>创建并初始化两个List类型的链表</li><li>将两个List类型的列表转换成HashSet类型</li><li>使用HashSet自带的取交集方法<code>set1.retainAll(set2)</code> ，此时set1中保存的就是原set1和set2的交集，即两个集合相同的元素。</li></ol><p>代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindCommonElements</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 示例数据</span></span><br><span class="line">        List&lt;Integer&gt; list1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用HashSet找出相同元素</span></span><br><span class="line">        Set&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list1);</span><br><span class="line">        Set&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(list2);</span><br><span class="line"></span><br><span class="line">        set1.retainAll(set2); <span class="comment">// 保留set1中与set2的交集</span></span><br><span class="line"></span><br><span class="line">        System.out.println(set1); <span class="comment">// 输出：[3, 4, 5]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构：哈希如何使用？"><a href="#数据结构：哈希如何使用？" class="headerlink" title="数据结构：哈希如何使用？"></a>数据结构：哈希如何使用？</h2><p>「哈希表 Hash Table」通过建立键 <code>key</code> 与值 <code>value</code> 之间的映射，实现高效的元素查询。具体而言，我们向哈希表输入一个 <code>key</code> ，则可以在O(1)时间内获取对应的 <code>value</code> 。</p><p>详情见下：</p><p><a href="https://www.hello-algo.com/chapter_hashing/hash_map/">哈希表（Hello算法）</a></p><h2 id="有一个集合Set怎么批量删除部分元素？"><a href="#有一个集合Set怎么批量删除部分元素？" class="headerlink" title="有一个集合Set怎么批量删除部分元素？"></a>有一个集合Set怎么批量删除部分元素？</h2><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoveElementsFromSet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 原始Set</span></span><br><span class="line">        Set&lt;Integer&gt; originalSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        originalSet.add(<span class="number">1</span>);</span><br><span class="line">        originalSet.add(<span class="number">2</span>);</span><br><span class="line">        originalSet.add(<span class="number">3</span>);</span><br><span class="line">        originalSet.add(<span class="number">4</span>);</span><br><span class="line">        originalSet.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要删除的元素集合</span></span><br><span class="line">        Set&lt;Integer&gt; elementsToRemove = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        elementsToRemove.add(<span class="number">3</span>);</span><br><span class="line">        elementsToRemove.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量删除部分元素</span></span><br><span class="line">        originalSet.removeAll(elementsToRemove);</span><br><span class="line"></span><br><span class="line">        System.out.println(originalSet); <span class="comment">// 输出：[1, 2, 4]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Linux查询一个日志文件的关键字？查询某个关键字的前后500行？"><a href="#Linux查询一个日志文件的关键字？查询某个关键字的前后500行？" class="headerlink" title="Linux查询一个日志文件的关键字？查询某个关键字的前后500行？"></a>Linux查询一个日志文件的关键字？查询某个关键字的前后500行？</h2><p>查询日志文件的某个关键字可以使用grep命令实现，例如:grep ‘关键字’ filePath</p><p>查询某个关键字的前后500行：grep -AB 500或者 grep -C 500（-C == -AB）</p><h2 id="怎么保证MySQL和Redis的一致性问题"><a href="#怎么保证MySQL和Redis的一致性问题" class="headerlink" title="怎么保证MySQL和Redis的一致性问题"></a>怎么保证MySQL和Redis的一致性问题</h2><p>读请求：先读缓存，如果缓存失效或不存在就让先获取到互斥锁的线程查数据库并回写缓存，让后续的请求直接都缓存即可</p><p>写请求：先更新数据库，再删缓存即可（此时可能会出现删缓存失败的场景，可以通过消息队列的方式，采取重试机制，如果删除缓存失败，则通过消息队列再进行一次删除缓存的操作，如果删除成功，则把消息队列里面的删除缓存操作删除即可，避免重复消费，造成不必要的资源浪费）</p><h2 id="价格类型的数据Java用什么存储？"><a href="#价格类型的数据Java用什么存储？" class="headerlink" title="价格类型的数据Java用什么存储？"></a>价格类型的数据Java用什么存储？</h2><p>1、BigDecimal（使用String类型的进行转换，才不会导致精度丢失)</p><p>2、整数存储（比如：3.14存为314）</p><p>3、自定义存储方式，数据库一个字段存整数，一个字段存小数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTP有哪些请求方式？&quot;&gt;&lt;a href=&quot;#HTTP有哪些请求方式？&quot; class=&quot;headerlink&quot; title=&quot;HTTP有哪些请求方式？&quot;&gt;&lt;/a&gt;HTTP有哪些请求方式？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PUT：将数据存储在服务器，覆盖指定URL，常用</summary>
      
    
    
    
    
    <category term="面经" scheme="http://xiaobazeo.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
</feed>
